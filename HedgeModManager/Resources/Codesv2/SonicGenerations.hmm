!!VERSION 1.0

Code "Infinite Rings" by "SuperSonic16"
Write<uint>(GetPointer(0x1E5E2F0, 0x5B8), 0x3E7)

Patch "Disable Ring Cap" by "Dar√≠o"
WriteProtected<ushort>(0xE68522, 0xDEB)
WriteProtected<byte>(0x1098E5F, 0xEB)

Patch "Disable Damage" by "SuperSonic16"
WriteNop(0xE2836A, 0x5)

Patch "Infinite Lives" by "CodenameGamma"
WriteNop(0xD59A67, 0x6)

Patch "Always Run in the Background" by "SuperSonic16"
WriteProtected<byte>(0xE7BF04, 0xEB)

Patch "Never Lose Rings With Super Sonic" by "Muzzarino"
WriteNop(0xE64E80, 6)

Patch "Custom Material Blend Modes" by "Muzzarino"
/* Overrides the game's default blend parameter with user specified blend params.
To use, hex edit the model's ".material" file with the blend flag set to mark the offset to be changed.
When specifying blend types, the source blend is shifted 4 bytes, and the destination factor is added onto the byte. Default is 00.

Examples:
56 = (05 << 4) || 06

Blend enumerations can be found here:
https://docs.microsoft.com/en-us/windows/win32/direct3d9/d3dblend

Same effect goes with interface .xncp
*/
WriteProtected<ushort>(0x6874D4, 0x08EB)
WriteProtected<ushort>(0x6874DE, 0x9050)
WriteProtected<byte>(0x6FEAB9, 0x31, 0xD2, 0x8B, 0xC2, 0x0F, 0xB6, 0x4B, 0x5A, 0x88, 0xC8, 0x24, 0x0F, 0xC0, 0xE9, 0x04, 0x84, 0xC9, 0xB2, 0x05, 0x0F, 0x44, 0xCA, 0xB2, 0x06, 0x84, 0xC0, 0x0F, 0x44, 0xC2, 0x50, 0x51, 0x8B, 0xCE, 0x85, 0xED, 0x6A, 0x01, 0x75, 0x07, 0xC7, 0x04, 0x24, 0x02, 0x00, 0x00, 0x00, 0x6A, 0x1B, 0xE8, 0x32, 0xD0, 0xD0, 0xFF, 0x8B, 0xCE, 0xFF, 0x34, 0x24, 0x6A, 0x13, 0xE8, 0x26, 0xD0, 0xD0, 0xFF, 0xFF, 0x74, 0x24, 0x04, 0x6A, 0x14, 0x8B, 0xCE, 0xE8, 0x19, 0xD0, 0xD0, 0xFF, 0x83, 0xC4, 0x08, 0x5F, 0x5D, 0x5B, 0x5E, 0xC3)
WriteProtected<byte>(0x10DD240, 0x8B, 0x44, 0x24, 0x04, 0x56, 0x50, 0x83, 0x24, 0x24, 0x0F, 0x83, 0x3C, 0x24, 0x00, 0x75, 0x04, 0x83, 0x0C, 0x24, 0x06, 0xC1, 0xE8, 0x04, 0x85, 0xC0, 0x75, 0x03, 0x83, 0xC8, 0x05, 0x50, 0x8B, 0xF1, 0x8B, 0x4E, 0x08, 0x6A, 0x13, 0x83, 0xC1, 0x60, 0xE8, 0xB2, 0xE8, 0x32, 0xFF, 0x8B, 0x4E, 0x08, 0x6A, 0x14, 0x83, 0xC1, 0x60, 0xE8, 0xA5, 0xE8, 0x32, 0xFF, 0x5E, 0xC2, 0x0C, 0x00)

Code "Can Always Activate Super Sonic" by "Muzzarino"
WriteProtected<byte>(0x11D33A4, 0xEB)
WriteProtected<byte>(0xE634C5, 0)
WriteProtected<byte>(0x11D67DC, 0xEB)
WriteProtected<byte>(0x111773A, 0xEB)
WriteProtected<byte>(0xE55D6A, 0x0)
WriteProtected<byte>(0xE632F1, 0x0)
WriteProtected<byte>(0xE634C7, 0x0)
var ptr0 = GetPointer(0x1E5E2F0, 0x1A5)
var ptr1 = GetPointer(0x1E5E2F0, 0x1228)
if (ptr0 != 0 && ptr1 != 0)
{
    Write<byte>(ptr0, (byte)(Read<byte>(ptr0) | 0x10))
    Write<byte>(ptr1, (byte)(Read<byte>(ptr1) | 0x10))
}

Code "Widescreen Support" by "Muzzarino"
Double width = (Double)Read<uint>(0x01DFE228)
Double height = (Double)Read<uint>(0x01DFE22C)
Double defaultwidth = 1280.0
Double defaultheight = 720.0
Double aspect = width / height
Double condaspect = 1.777777777777777778
WriteProtected<double>(0x01703EA0,defaultheight * condaspect / (aspect < condaspect ? aspect : condaspect))
WriteProtected<double>(0x01703EA8,Read<double>(0x01703EA0) * aspect)
WriteProtected(0x6754D0,0xC3)
Double xoffset = (Read<double>(0x01703EA8) - defaultwidth) * 0.5
Double yoffset = (Read<double>(0x01703EA0) - defaultheight) * 0.5
WriteProtected<float>(0x01B23F10,Read<float>(0x01B23F08) * (float)xoffset)
WriteProtected<float>(0x01B23F14,Read<float>(0x01B23F0C) * (float)yoffset)
WriteProtected<float>(0x013EA85C,200f + (float)yoffset)
WriteProtected<float>(0x017041F8,880f + (float)xoffset)
WriteProtected<float>(0x01703CA8,400f + (float)xoffset)
WriteProtected<double>(0x01703CA0,640 + xoffset)
WriteProtected<float>(0x016866E4,(float)Read<double>(0x01703CA0))
WriteProtected<double>(0x01703F58,259 + yoffset)

string code = @"fild dword ptr [0x01DFE228]
fidiv dword ptr [0x01DFE22C]
fld st(0)
fld dword ptr [0x01703B38]
fdiv dword ptr [0x016D2E4C]
fld st(0)
fcomi st(0),st(2)
fcmovb st(0),st(2)
fdivp st(2),st(0)
fdivp st(2),st(0)
fmulp st(2),st(0)
fmul dword ptr [ebp+0x10]
fstp dword ptr [ebp+0x10]
fld st(0)
fdiv dword ptr [ebp+0x10]"

string code2 = @"fld st(0)
fild dword ptr [0x01DFE228]
fidiv dword ptr [0x01DFE22C]
fdivrp st(1),st(0)
fmulp st(1),st(0)
fstp dword ptr [esi+0xB8]"

string code3 = @"fld qword ptr [0x01703EA8]
fsub dword ptr [0x01703B38]
fmul qword ptr [0x017038F8]
fchs
fstp dword ptr [ecx+0x60]
fld qword ptr [0x01703EA0]
fsub dword ptr [0x016D2E4C]
fmul qword ptr [0x017038F8]
fsubr dword ptr [ecx+0x64]
fstp dword ptr [ecx+0x64]"

string code4 = @"mov eax,0x679B50
fld qword ptr [0x01703EA8]
fsub dword ptr [0x01703B38]
fmul qword ptr [0x017038F8]
fadd dword ptr [esp]
fstp dword ptr [esp]
fld qword ptr [0x01703EA0]
fsub dword ptr [0x016D2E4C]
fadd dword ptr [esp+0x4]
fstp dword ptr [esp+0x4]
call eax"

string code5 = @"fild dword ptr [0x01DFE228]
fidiv dword ptr [0x01DFE22C]
fld dword ptr [0x01703B38]
fdiv dword ptr [0x016D2E4C]
fcomi st(0),st(1)
fcmovb st(0),st(1)
fdivp st(1),st(0)
fld dword ptr [0x01703B38]
fdiv dword ptr [0x016D2E4C]
fild dword ptr [0x01DFE228]
fidiv dword ptr [0x01DFE22C]
fdivp st(1),st(0)
fmul st(0),st(1)
fmul qword ptr [0x017038F8]
fsub qword ptr [0x017038F8]
fchs
fst dword ptr [esp+0x18]
fld1
fsubrp st(1),st(0)
fstp dword ptr [esp+0x20]
fmul qword ptr [0x017038F8]
fsub qword ptr [0x017038F8]
fchs
fst dword ptr [esp+0x1C]
fld1
fsubrp st(1),st(0)
fstp dword ptr [esp+0x24]
cmp byte ptr [edi+0x30],00"

string code6 = @"fild dword ptr [0x01DFE228]
fidiv dword ptr [0x01DFE22C]
fld dword ptr [0x01703B38]
fdiv dword ptr [0x016D2E4C]
fcomi st(0),st(1)
fcmovb st(0),st(1)
fdivp st(1),st(0)
push 00
fstp dword ptr [esp]
movss xmm0,[esp]
fld dword ptr [0x01703B38]
fdiv dword ptr [0x016D2E4C]
fild dword ptr [0x01DFE228]
fidiv dword ptr [0x01DFE22C]
fdivp st(1),st(0)
fmul dword ptr [esp]
fmul qword ptr [0x017038F8]
fsub qword ptr [0x017038F8]
fchs
fstp dword ptr [esp]
movss xmm1,[esp]
add esp,04
cvtps2pd xmm0,xmm0"

string code7 = @"fild dword ptr [0x01DFE228]
fidiv dword ptr [0x01DFE22C]
fld dword ptr [0x01703B38]
fdiv dword ptr [0x016D2E4C]
fcomi st(0),st(1)
fcmovb st(0),st(1)
fdivp st(1),st(0)
push 00
fstp dword ptr [esp]
fld dword ptr [0x01703B38]
fdiv dword ptr [0x016D2E4C]
fild dword ptr [0x01DFE228]
fidiv dword ptr [0x01DFE22C]
fdivp st(1),st(0)
fmul dword ptr [esp]
fmul qword ptr [0x017038F8]
fsub qword ptr [0x017038F8]
fchs
fld1
fsubrp st(1),st(0)
fstp dword ptr [esp]
movss xmm2,[esp]
add esp,04"

string code8 = @"fild dword ptr [0x01DFE228]
fidiv dword ptr [0x01DFE22C]
fld st(0)
fild dword ptr [edi+0xF0]
fidiv dword ptr [edi+0xF4]
fdivr st(2),st(0)
fcomi st(0),st(1)
fcmovb st(0),st(1)
fdivp st(1),st(0)
fmul st(1),st(0)
fmul qword ptr [0x017038F8]
fsub qword ptr [0x017038F8]
fchs
fst dword ptr [esp+0x48]
fld1
fsubrp st(1),st(0)
fstp dword ptr [esp+0x50]
fmul qword ptr [0x017038F8]
fsub qword ptr [0x017038F8]
fchs
fst dword ptr [esp+0x44]
fld1
fsubrp st(1),st(0)
fstp dword ptr [esp+0x4C]"

string code9 = @"fld st(0)
fild dword ptr [0x01DFE228]
fidiv dword ptr [0x01DFE22C]
fdivrp st(1),st(0)
fmulp st(1),st(0)"

if (Read<uint>(0x6F23C6) == 0x75D8C0D9 &&
Read<ushort>(0x64928A) == 0x9ED9 &&
Read<uint>(0xD08F88) == 0x49100FF3 &&
Read<uint>(0xD09112) == 0xFF970A3A &&
Read<uint>(0x1059D37) == 0x44110FF3 &&
Read<uint>(0xB1D845) == 0xFC9570F &&
Read<uint>(0xB1D86F) == 0x15100FF3 &&
Read<uint>(0x57876F) == 0x44110FF3 &&
Read<ushort>(0x789A04) == 0x87D9)
{
	WriteAsmHook(code, 0x6F23C6, HookBehavior.Replace)
	WriteAsmHook(code2, 0x64928A, HookBehavior.Replace)
	WriteAsmHook(code3, 0xD08F88, HookBehavior.After)
	WriteAsmHook(code4, 0xD09111, HookBehavior.Replace)
	WriteAsmHook(code5, 0x1059D37, HookBehavior.Before)
	WriteAsmHook(code6, 0xB1D845, HookBehavior.Replace)
	WriteAsmHook(code7, 0xB1D86F, HookBehavior.Replace)
	WriteAsmHook(code8, 0x57876F, HookBehavior.Before)
	WriteAsmHook(code9, 0x789A04, HookBehavior.Before)
}

Patch "Field of View Adjustment" by "Muzzarino"
string code = @"push 0x3F800000
fdiv dword ptr [esp]
add esp,0x04
fstp dword ptr [esp+0x0C]
fld dword ptr [ebp+0x14]"
WriteAsmHook(code, 0x6F23AA, HookBehavior.Replace)

Patch "Bypass Boss Key Check" by "Muzzarino"
WriteProtected<byte>(0xEFB9FC, 0xEB)
WriteProtected<byte>(0xEFA160, 0x0)
WriteProtected<byte>(0x108B6DA, 0x0)
WriteProtected<byte>(0x108B6E7, 0x0)
WriteProtected<byte>(0x108B6D5, 0x0)
WriteProtected<byte>(0x4DA787, 0x0)
WriteProtected<byte>(0x4DA787, 0x8C)

Patch "Have All Chaos Emeralds" by "Muzzarino"
WriteProtected<uint>(0x108BB11, 0x900300C6)
WriteProtected<byte>(0x108BB15, 0x90)
WriteProtected<ushort>(0x108BB1F, 0x34EB)

Patch "Sparkles Remain on the Hub World" by "Muzzarino"
WriteProtected<ushort>(0xEE3DA6, 0x6EB)

Patch "Win Challenges Without Meeting the Required Amount of Items" by "Muzzarino"
WriteProtected<uint>(0xD0EAB9, 0xCCC301B0)

Code "Infinite Boost Gauge" by "Zoney"
Write<float>(GetPointer(0x1E5E2F0, 0x5BC), 500)

Patch "All Levels are Selectable" by "Muzzarino"
WriteProtected<byte>(0xEE5DE8, 0xC)
WriteProtected<byte>(0xEE6134, 0xC)

Patch "Buy Anything at the Skill Shop With Any Points" by "Muzzarino"
WriteNop(0x4409D2, 6)

Patch "Never Subtract Points When Buying a Skill" by "Muzzarino"
WriteNop(0x440726, 6)

Patch "All Levels Display Names Even If Not Unlocked"  by "Muzzarino & brianuuu"
WriteProtected<byte>(0xD58A93, 0xEB, 0x41, 0xEB, 0x3F)

Patch "Replay Rescue Cutscenes" by "Muzzarino"
WriteProtected<ushort>(0xD29532, 0x6EB)

Patch "Colour Dodge Trail Blending" by "Muzzarino"
WriteProtected<byte>(0xE8D3AC, 0x9)

Patch "Lighten Trail Blending" by "Muzzarino"
WriteProtected<byte>(0xE8D3AC, 0xA)

Patch "Screen Trail Blending" by "Muzzarino"
WriteProtected<byte>(0xE8D3AC, 0x2)
WriteProtected<byte>(0xE8D3B7, 0x4)

Patch "Colour Burn Trail Blending" by "Muzzarino"
WriteProtected<byte>(0xE8D3B7, 0x3)

Patch "Opaque Trail Blending" by "Muzzarino"
WriteProtected<byte>(0xE8D3B7, 0x1)

Patch "Normal Trail Blending" by "Muzzarino"
WriteProtected<byte>(0xE8D3B7, 0x6)

Patch "Glowing Trail Blending" by "Muzzarino"
WriteProtected<byte>(0xE8D3B7, 0x7)

Patch "Subtractive Trail Blending" by "Muzzarino"
WriteProtected<byte>(0xE8D3AC, 0xB)

Patch "Subtitles Appear Additive If Colour Is Bright" by "Muzzarino"
WriteProtected<byte>(0x40FED4, 0xE9)
WriteProtected<uint>(0x40FED5, 0xFB1DBE)
WriteNop(0x40FED9, 2)
WriteProtected<uint>(0x13C1C97, 0x80FB8053)
WriteProtected<ushort>(0x13C1C9B, 0x2070)
WriteProtected<ushort>(0x13C1C9D, 0xEBC1)
WriteProtected<uint>(0x13C1C9F, 0x80FB8008)
WriteProtected<ushort>(0x13C1CA3, 0x1870)
WriteProtected<ushort>(0x13C1CA5, 0xEBC1)
WriteProtected<uint>(0x13C1CA7, 0x80FB8008)
WriteProtected<ushort>(0x13C1CAB, 0x1070)
WriteProtected<uint>(0x13C1CAD, 0x54840C7)
WriteProtected<uint>(0x13C1CB4, 0x24C40C7)
WriteProtected<ushort>(0x13C1CBB, 0x7EB)
WriteProtected<uint>(0x13C1CBD, 0x64C40C7)
WriteProtected<ushort>(0x13C1CC4, 0x1C8B)
WriteProtected<uint>(0x13C1CC6, 0x4C48324)
WriteProtected<byte>(0x13C1CCA, 0xE9)
WriteProtected<uint>(0x13C1CCB, 0xFF04E20C)

Patch "Freeze Timer" by "Muzzarino"
WriteNop(0xD02E48, 8)

Patch "Freeze Challenge Timer" by "Muzzarino"
WriteNop(0x124EFC5, 8)
WriteNop(0xD0E7D5, 2)

Patch "Don't Allow Timer to Reduce Ranks on Challenges" by "Muzzarino"
WriteProtected<uint>(0xD611B3, 0x90C0570F)
WriteNop(0xD611B7, 4)

Patch "1280x720 Media Player" by "N69"
WriteProtected<ushort>(0xB210A1, 1280)
WriteProtected<ushort>(0xB210B1, 720)

Patch "1920x1080 Media Player" by "N69"
WriteProtected<ushort>(0xB210A1, 1920)
WriteProtected<ushort>(0xB210B1, 1080)

Code "29.97 FPS Cap" by "PTKickass"
Write<float>(0x19FD2C, 29.97f)

Code "59.94 FPS Cap" by "PTKickass"
Write<float>(0x19FD2C, 59.94f)

Code "Locked 30 FPS (experimental)" by "Skyth and M&M"
Write<float>(0x19FD2C, 30.0f)
WriteNop(0xE7B5D7, 2)
WriteProtected<float>(0x1704258, 1.0f / 30.0f)
WriteProtected<float>(0x14AF8CC, 1.0f / 30.0f)
WriteProtected<float>(0x13E08A0, 1.0f / 30.0f) /* Cutscene Playback */

Code "Locked 60 FPS" by "Skyth and M&M"
Write<float>(0x19FD2C, 60.0f)
WriteNop(0xE7B5D7, 2)
WriteProtected<float>(0x1704258, 1.0f / 60.0f)
WriteProtected<float>(0x14AF8CC, 1.0f / 60.0f)

Code "60 FPS Cutscenes (experimental, requires Locked 60 FPS)"
WriteProtected<float>(0x13E08A0, 1.0f / 60.0f)

Code "Locked 72 FPS (experimental)" by "Skyth and M&M"
Write<float>(0x19FD2C, 72.0f);
WriteNop(0xE7B5D7, 2);
WriteProtected<float>(0x1704258, 1.0f / 72.0f)
WriteProtected<float>(0x14AF8CC, 1.0f / 72.0f)

Code "Locked 75 FPS (experimental)" by "Skyth and M&M"
Write<float>(0x19FD2C, 75.0f);
WriteNop(0xE7B5D7, 2);
WriteProtected<float>(0x1704258, 1.0f / 75.0f)
WriteProtected<float>(0x14AF8CC, 1.0f / 75.0f)

Code "Locked 120 FPS (experimental)" by "Skyth and M&M"
Write<float>(0x19FD2C, 120.0f);
WriteNop(0xE7B5D7, 2);
WriteProtected<float>(0x1704258, 1.0f / 120.0f)
WriteProtected<float>(0x14AF8CC, 1.0f / 120.0f)

Code "Locked 144 FPS (experimental)" by "Skyth and M&M"
Write<float>(0x19FD2C, 144.0f);
WriteNop(0xE7B5D7, 2);
WriteProtected<float>(0x1704258, 1.0f / 144.0f)
WriteProtected<float>(0x14AF8CC, 1.0f / 144.0f)

Code "Locked 165 FPS (experimental)" by "Skyth and M&M"
Write<float>(0x19FD2C, 165.0f);
WriteNop(0xE7B5D7, 2);
WriteProtected<float>(0x1704258, 1.0f / 165.0f)
WriteProtected<float>(0x14AF8CC, 1.0f / 165.0f)

Patch "Disable FPS Limit" by "Skyth"
WriteProtected<byte>(0xE7B580, 0xEB);

Patch "Fix Input Delay with Arbitrary Framerates (experimental)" by "Skyth"
WriteProtected<byte>(0xD6CBCA, 0xF3, 0x0F, 0x10, 0x44, 0x24, 0x24);
WriteNop(0xD6CBD0, 14);

Patch "Longer Blue Trail" by "N69 & Nekit"
WriteNop(0xE5FB17, 6)
WriteProtected<byte>(0xE5FE10, 0x48)
WriteProtected<byte>(0xE5FE70, 0x48)

Patch "Stomp Keeps Horizontal Velocity" by "TGE"
string code = @"
movaps xmm1, [edi+0x290]
addps xmm0, xmm1
movaps [edi+0x290], xmm0"
WriteAsmHook(code, 0x01254D4C, HookBehavior.Replace)

Patch "Unleashed Sweepkick" by "N69"
WriteProtected<ushort>(0xDFF8D6, 0x5608)

Patch "No Trick Rainbow Rings" by "Hyper"
WriteNop(0x115A6AF, 2);

Patch "Ice Pillars Replace Fire Pillars" by "N69 & RFunk195"
WriteProtected<byte>(0xE020EB, 0x1)
WriteProtected<byte>(0x16617CB, 0x31)
WriteProtected<byte>(0x16617D2, 0x31)
WriteProtected<byte>(0x1661882, 0x69, 0x63, 0x65, 0x70, 0x61, 0x6E, 0x65, 0x6C, 0x5F)
WriteProtected<byte>(0x166189E, 0x69, 0x63, 0x65, 0x70, 0x61, 0x6E, 0x65, 0x6C, 0x5F)
WriteProtected<byte>(0x16618BA, 0x69, 0x63, 0x65, 0x70, 0x61, 0x6E, 0x65, 0x6C, 0x5F)

Patch "Fix Skydive Collision Detection" by "N69"
WriteNop(0x119822E, 18)

Patch "All Rings Can Be Light Dashed" by "Skyth"
WriteProtected<uint>(0x105334D, 0x10C47C6)
WriteNop(0x1053351, 16)

Patch "Triggers Debug View" by "Aruki"
Write<byte>(0x1E5E39B, 1)

Patch "Object Collision Debug View" by "Aruki"
Write<byte>(0x1E5E3A0, 1)

Patch "Borderless Fullscreen" by "Sajid"
string code = @"mov eax,[ebp+18]
mov [eax+0x20],00000001
mov [eax+0x1C],00000000
mov [eax+0x30],00000000
mov [ebp-0x1C],ecx
push 0x00003210"
WriteAsmHook(code, 0xA5EB5B, HookBehavior.Replace)

Patch "No Out of Control Balloons" by "N69"
WriteProtected<uint>(0x11BEBAA, 0xB6E9)
WriteProtected<byte>(0x11BEBAE, 0x0)
WriteNop(0x11BEBAF, 2)

Patch "No Out of Control Jump Springs"
WriteProtected<uint>(0x11BEA91, 0x1CFE9)
WriteProtected<ushort>(0x11BEA95, 0x8B00)
WriteProtected<byte>(0x11BEA97, 0x83)

Patch "Use Bumpers to Switch Grind Rails" by "Skyth & brianuuu"
WriteProtected<byte>(0xDFCC78, 0x8B, 0x83, 0x1C, 0x01, 0x00, 0x00)
WriteProtected<byte>(0xDFCC80, 0xBF, 0x03, 0x00, 0x00, 0x00)
WriteProtected<byte>(0xDFCC85, 0xE8, 0x76, 0xB1, 0xF9, 0xFF)
WriteProtected<byte>(0xDFCC8A, 0x84, 0xC0)
WriteProtected<byte>(0xDFCC8C, 0x75, 0x13)
WriteProtected<byte>(0xDFCC8E, 0x8B, 0x83, 0x1C, 0x01, 0x00, 0x00)
WriteProtected<byte>(0xDFCC94, 0xBF, 0x02, 0x00, 0x00, 0x00)
WriteProtected<byte>(0xDFCC99, 0xEB, 0x0D, 0x90, 0x90, 0x90, 0x90)
WriteProtected<byte>(0xDFCCA8, 0xE8, 0x53, 0xB1, 0xF9, 0xFF)
WriteProtected<byte>(0xDFCCAD, 0x84, 0xC0)
WriteProtected<byte>(0xDFCCAF, 0x90, 0x90, 0x90, 0x90, 0x74, 0x59)

Patch "Unleashed Style Grinding Animations" by "Skyth"
WriteProtected<ushort>(0xDF2380, 0xA4E9);
WriteProtected<byte>(0xDF2382, 0x0);
WriteNop(0xDF2385, 1);
WriteProtected<byte>(0xDF2356, 0xEB);
WriteProtected<byte>(0xDF2485, 0xEB);

// GrindStumbleLimit
WriteAsmHook(@"
add esp, 4
movss xmm0, ds:0x13F9EDC
", 0xDF21C5, HookBehavior.Replace);
WriteAsmHook(@"
add esp, 4
movss xmm0, ds:0x13F9EDC
", 0xDF225E, HookBehavior.Replace);

Code "All Walls Are Wall-Jumpable" by "SWS90"
Write<byte>(GetPointer(0x1E5E2F0, 0x80C), 1)

Patch "Tricks Don't Fill The Boost Gauge"
WriteNop(0xE4B323, 8)
WriteNop(0xE4B353, 8)

Patch "Boost Gauge Starts Empty" by "PTKickass"
WriteProtected<uint>(0xE64F2F, 0x90C9570F)
WriteNop(0xE64F33, 4)

Code "Everything is 1/4 Speed Except For Sonic" by "Sajid"
Write<byte>(GetPointer(0x1E0BE5C, 8, 0x19D), 1)
Write<float>(GetPointer(0x1E0BE5C, 8, 0x1A4), 0.25f)

Code "Everything is 1/2 Speed Except For Sonic" by "Sajid"
Write<byte>(GetPointer(0x1E0BE5C, 8, 0x19D), 1)
Write<float>(GetPointer(0x1E0BE5C, 8, 0x1A4), 0.5f)

Code "Everything is 2x Speed Except For Sonic" by "Sajid"
Write<byte>(GetPointer(0x1E0BE5C, 8, 0x19D), 1)
Write<float>(GetPointer(0x1E0BE5C, 8, 0x1A4), 2)

Code "Everything is 4x Speed Except For Sonic" by "Sajid"
Write<byte>(GetPointer(0x1E0BE5C, 8, 0x19D), 1)
Write<float>(GetPointer(0x1E0BE5C, 8, 0x1A4), 4)

Code "Everything is 2x Speed" by "Dar√≠o"
Write<byte>(GetPointer(0x1E0BE5C, 8, 0x19C), 1)
Write<float>(GetPointer(0x1E0BE5C, 8, 0x1A0), 2)

Patch "Allow Multiple Instances" by "Sajid & Skyth"
WriteProtected<byte>(0xE7A6E6, 0x83)
WriteProtected<byte>(0xE7A6E7, 0xC4)
WriteProtected<byte>(0xE7A6E8, 0xC)
WriteNop(0xE7A6E9, 0x3)

Code "Disable Motion Blur" by "Skyth"
Write<byte>(0x1A43103, 0)

Code "Set Shadow Bias to 0.0002" by "Skyth"
Write<float>(0x1A4356C, 0.0002f)

Patch "Disable HUD in Stages" by "brianuuu"
WriteNop(0x108AB3F, 2)
WriteProtected<byte>(0x108ABFE, 0xE9, 0xED, 0x00, 0x00, 0x00, 0x90)
WriteNop(0x108D563, 6)
WriteProtected<byte>(0x108D5D5, 0xE9, 0xED, 0x00, 0x00, 0x00, 0x90)
WriteNop(0x1098AFB, 6)
WriteProtected<byte>(0x1098B6D, 0xE9, 0xF6, 0x00, 0x00, 0x00, 0x90)
WriteNop(0x117DE55, 2)
WriteProtected<byte>(0x117DE67, 0xEB)

Patch "Disable Sonic Smoke Trail" by "Sajid"
Write<byte>(0x1A44AE2, 0)
WriteNop(0x11A2D28, 23)

Patch "Disable Homing Attack" by "Sajid"
WriteProtected<float>(0x1704800, 0)

Patch "Controller Hotplugging Support" by "Skyth"
WriteProtected<byte>(0x9C85FA, 0x83)
WriteProtected<byte>(0x9C85FB, 0xFA)
WriteProtected<byte>(0x9C85FC, 0x4)
WriteNop(0x9C8603, 12)
WriteProtected<byte>(0x9C86B2, 0x83)
WriteProtected<byte>(0x9C86B3, 0xFA)
WriteProtected<byte>(0x9C86B4, 0x4)
WriteNop(0x9C86BB, 12)
WriteNop(0x9C8163, 2)
WriteNop(0x9C8168, 8)
WriteNop(0x9C8173, 1)
WriteProtected<byte>(0x9C8176, 0xE8)
WriteProtected<byte>(0x9C8177, 0xC7)
WriteProtected<byte>(0x9C8178, 0x40)
WriteProtected<byte>(0x9C8179, 0xC)
WriteProtected<byte>(0x9C817A, 0x4)
WriteProtected<byte>(0x9C817B, 0x0)
WriteProtected<byte>(0x9C817C, 0x0)
WriteProtected<byte>(0x9C817D, 0x0)
WriteNop(0x9C8A70, 2)
WriteNop(0x9C8AC0, 2)

Patch "Fix Boost Gauge Particles" by "Skyth"
WriteProtected<byte>(0x11AEC51, 0xB9, 0x00, 0x00, 0x34, 0x44, 0x66, 0x0F, 0x6E, 0xD1, 0xB9, 0x00, 0x00, 0xA0, 0x44, 0x66, 0x0F, 0x6E, 0xC1)
WriteNop(0x11AEC63, 22)

Patch "Homing Attack on Boost" by "SWS90"
WriteProtected<byte>(0x015FA418, 0)

Patch "Fix Sonic's Legs Swinging Too High" by "Skyth"
WriteProtected<byte>(0x117F371, 0xE9, 0x35, 0x02, 0x00, 0x00, 0x90);
WriteProtected<byte>(0x117F5C8, 0xEB);

Code "Disable Depth of Field" by "Luig"
Write<byte>(0x01A4358D, 0)

Code "Full Resolution Planar Reflections" by "Luig"
Write<float>(0x01B22e84, 1f)

Patch "Disable Brightness Adjustment" by "Skyth"
WriteProtected<byte>(0xD68183, 0x83, 0xC4, 0x08, 0x90, 0x90);

Patch "Disable Spin Jump Particles" by "Hyper"
WriteProtected<byte>(0x15E902C, 0x00);
WriteProtected<byte>(0x15F99DC, 0x00);

Patch "Disable Light Dash Particles" by "Hyper"
WriteProtected<byte>(0x10538EB, 0xE9, 0x8F, 0x00, 0x00, 0x00, 0x90);

Patch "Disable Lap Time Display" by "Hyper"
WriteProtected<byte>(0x10976EF, 0x90, 0xE9);

Patch "Disable Homing Reticles" by "Hyper"
WriteProtected<byte>(0xB6AB8C, 0xE9, 0xF7, 0x01, 0x00, 0x00);
WriteProtected<byte>(0xDEBC36, 0x00);

Patch "Disable Spin Dash on Dash Panels" by "Hyper"
WriteProtected<byte>(0xE0AC1C, 0xE9, 0x27, 0x01, 0x00, 0x00);
WriteProtected<byte>(0xE0C734, 0xE9, 0x27, 0x01, 0x00, 0x00);

Patch "Disable Boost Gauge" by "Hyper"
WriteNop(0x109B8DD, 2);

Patch "Disable Boost Button Prompt" by "Hyper"
WriteProtected<byte>(0x109BC7C, 0xE9, 0x71, 0x01, 0x00, 0x00);

Patch "Always Use Ellipse Spin Dash" by "Hyper"
WriteProtected<byte>(0x1289ADE, 0x14, 0xAE);

Patch "Always Use Sphere Spin Dash" by "Hyper"
WriteProtected<byte>(0x1A545A4, 0xEC, 0xAD);

Patch "Disable Loading Hints" by "Hyper"
WriteProtected<byte>(0x448959, 0xE9, 0x12, 0x01, 0x00, 0x00);

Patch "Disable Title Loading Video" by "Hyper"
WriteProtected<byte>(0xD6966E, 0xE9, 0x14, 0x01, 0x00, 0x00);

Patch "Increased Homing Speed" by "Hyper"
WriteProtected<byte>(0x120FF35, 0xF3, 0x0F, 0x10, 0x05, 0xFC, 0x15, 0xA4, 0x01);
WriteProtected<byte>(0x121618B, 0xF3, 0x0F, 0x10, 0x05, 0xFC, 0x15, 0xA4, 0x01);
WriteProtected<byte>(0x15FDC18, 0x00);
WriteProtected<byte>(0x15FFD80, 0x00);

Patch "Disable Homing Delay" by "Hyper"
WriteNop(0x1205D44, 8);
WriteProtected<byte>(0x15FA49C, 0x00);

Patch "Disable Lives" by "Hyper"
WriteNop(0xD59A67, 6);
WriteNop(0xE68562, 5);
WriteProtected<byte>(0x1098C82, 0xEB);
WriteProtected<byte>(0x109B1A4, 0xE9, 0xDC, 0x02, 0x00, 0x00);
WriteProtected<byte>(0x11CCA82, 0xE9, 0xB1, 0x00, 0x00, 0x00);
WriteProtected<byte>(0x166463C, 0x00);
WriteProtected<byte>(0x167DDE4, 0x00);

Patch "Use Japanese Name for Rooftop Run" by "Hyper"
WriteNop(0xEE51E5, 2);

Patch "Use Original Stage Text Colours" by "Hyper"
WriteProtected<byte>(0xEE3F90, 0xEB, 0x2A);

Code "Full Resolution Distortion Effects" by "Luig"
Write<float>(0x01B22E6C, 1f)

Code "2x Shadowmap Draw Distance but Lower Quality Shadows" by "Luig"
Write<float>(0x01A57310, 50f)
Write<float>(0x01A57314, 50f)
Write<float>(0x01A57318, 60f)

Patch "Remove SEGA from Title Bar" by "Hyper"
WriteProtected<byte>(0xE7A99D, 0x3C);

Patch "Start Stages Standing Still" by "Hyper"
WriteProtected<byte>(0xD944D4, 0x85);

Patch "Disable Checkpoints" by "Hyper"
WriteNop(0x1033338, 2);

Patch "Never Receive Boost From Enemies" by "Hyper"
WriteProtected<byte>(0x112435C, 0xE9, 0xAB, 0x00, 0x00, 0x00);
WriteNop(0x11246D9, 5);

Patch "Disable Character Action Voices" by "Hyper"
WriteProtected<uint>(0xDF0B96, 0xFFFFFF);  /* 3002_action01 (used for Unleashed jump selector) */
WriteProtected<uint>(0xDF0C08, 0xFFFFFF);  /* 3002_action01 (used for Unleashed jump selector) */
WriteProtected<uint>(0xDFC993, 0xFFFFFF);  /* 3002_action01 (used for bouncing off physics objects) */
WriteProtected<uint>(0xE4B684, 0xFFFFFF);  /* 3002_action01 (used for tricks) */
WriteProtected<uint>(0xE4B8E0, 0xFFFFFF);  /* 3002_action01 (used for trick finish) */
WriteProtected<uint>(0xE57E6F, 0xFFFFFF);  /* 3002_action01 (used for jumping) */
WriteProtected<uint>(0x11D7B8C, 0xFFFFFF); /* 3002_action01 (used for grinding) */
WriteProtected<uint>(0x123B475, 0xFFFFFF); /* 3002_action01 (used for cannons) */
WriteProtected<uint>(0x1252740, 0xFFFFFF); /* 3002_action01 (used for squat kick) */
WriteProtected<uint>(0x1117EF4, 0xFFFFFF); /* 3002_stumble */
WriteProtected<uint>(0xE0248C, 0xFFFFFF);  /* 3002_damage01 */
WriteProtected<uint>(0xE02496, 0xFFFFFF);  /* 3002_damage02 */
WriteProtected<uint>(0xE024A0, 0xFFFFFF);  /* 3002_damage03 */
WriteProtected<uint>(0xE024AA, 0xFFFFFF);  /* 3002_damage04 */
WriteProtected<uint>(0xDF0B63, 0xFFFFFF);  /* 3002_damage05 (used for Unleashed jump selector) */
WriteProtected<uint>(0xE4466E, 0xFFFFFF);  /* 3002_strain (used for pushing) */
WriteProtected<uint>(0xE023E3, 0xFFFFFF);  /* 3002_dead (used for dying from enemies) */
WriteProtected<uint>(0xE55D3D, 0xFFFFFF);  /* 3002_dead (used for dying from falling) */
WriteProtected<uint>(0x1117CEB, 0xFFFFFF); /* 3002_action03 (used for boost) */
WriteProtected<uint>(0x1254E04, 0xFFFFFF); /* 3002_action03 (used for stomping) */
WriteProtected<uint>(0xDF3710, 0xFFFFFF);  /* 3002_action04 (used for drift) */
WriteProtected<uint>(0x1117D09, 0xFFFFFF); /* 3002_action04 (used for boost) */
WriteProtected<uint>(0x11184E4, 0xFFFFFF); /* 3002_action04 (used for homing success) */
WriteProtected<uint>(0x1118512, 0xFFFFFF); /* 3002_action03 (used for homing success) */
WriteProtected<uint>(0x1119B1F, 0xFFFFFF); /* 3002_action04 (used for board drift) */
WriteProtected<uint>(0xE3DADD, 0xFFFFFF);  /* 3002_success01 (used for blast off) */
WriteProtected<uint>(0xE462AA, 0xFFFFFF);  /* 3002_success01 (used for pulleys) */
WriteProtected<uint>(0x1117D27, 0xFFFFFF); /* 3002_action05 (used for boost) */
WriteProtected<uint>(0x1231971, 0xFFFFFF); /* 3002_action05 (used for light dash) */
WriteProtected<uint>(0xDF0B63, 0xFFFFFF);  /* 3002_damage06 */
WriteProtected<uint>(0x11D72DC, 0xFFFFFF); /* 3002_action06 */

Patch "Disable Boost Audio Filter" by "Hyper"
WriteProtected<byte>(0xE2E26B, 0xEB); /* Sonic::Player::CPlayerSpeedPosturePluginAisacGhz */
WriteProtected<byte>(0xE2E409, 0xEB); /* Sonic::Player::CPlayerSpeedPosturePluginAisac */

Patch "Disable Water Audio Filter" by "Hyper"
WriteProtected<byte>(0xD6F084, 0xC7, 0x06, 0xFC, 0xD2, 0x6D, 0x01); /* replace WaterToGround with Nop */
WriteProtected<byte>(0xD6F53A, 0xE9, 0xC7, 0x00, 0x00, 0x00); /* Sonic::CSoundBgmAisacController::GroundToWater */

Patch "Classic Sonic Always Has Homing Attack" by "Sajid"
WriteNop(0x00DC50DF, 6)

Patch "Red Rings Appear On New Game" by "brianuuu"
WriteNop(0x11A9ECB, 2);

Patch "Disable Boost Particles" by "Hyper"
WriteProtected<byte>(0x15E9048, 0x00);
WriteProtected<byte>(0x15E9060, 0x00);
WriteProtected<byte>(0x15F99F8, 0x00);
WriteProtected<byte>(0x15F9A10, 0x00);
WriteProtected<byte>(0x164330C, 0x00);

Patch "Disable Air Boost" by "Sajid"
WriteProtected<byte>(0x00DFDFC4, 0xEB, 0x27)
WriteProtected<byte>(0x00DFE046, 0xEB, 0x9E)

Patch "Closer Super Sonic FOV" by "brianuuu"
WriteProtected<byte>(0x11D9F32, 0xC7, 0x80, 0x70, 0x01, 0x00, 0x00)
WriteProtected<float>(0x11D9F38, (float)1.3089969288525)
WriteNop(0x11D9F3C, 2)
WriteProtected<byte>(0x11D9EFB, 0x8B, 0x16, 0xC7, 0x82, 0x6C, 0x01, 0x00, 0x00)
WriteProtected<float>(0x11D9F03, (float)0.8)
WriteNop(0x11D9F07, 8)
WriteProtected<byte>(0x10E7B96, 0xEB, 0x0A)

Patch "Decrease Super Sonic Rings Every Second" by "brianuuu"
WriteProtected<byte>(0x11D6807, 0xC7, 0x47, 0x64)
WriteProtected<float>(0x11D680A, 1)
WriteProtected<byte>(0x11D680E, 0xEB, 0x1D)

Patch "Disable Super Sonic Floating Boost (Ground Boost)" by "Skyth"
WriteProtected<byte>(0xDFF34C, 0xEB);

Patch "Disable Super Sonic Floating Boost (Air Boost)" by "Skyth"
WriteProtected<byte>(0xDFE04C, 0xEB);

Patch "Disable Rail Boosters" by "Hyper"
WriteProtected<byte>(0x166F238, 0x00);

Patch "Disable Spike Wisp Music" by "Hyper"
WriteProtected<byte>(0xE3DD80, 0xEB, 0x33); /* Spike - on contact with wisp active */
WriteProtected<byte>(0xE3E00A, 0xEB, 0x33); /* Spike - on contact without wisp active */

Patch "Disable Rocket Wisp Music" by "Hyper"
WriteProtected<byte>(0xE3E0AA, 0xEB, 0x33);

Patch "Disable Skill Set Limiters" by "Hyper"
WriteProtected<byte>(0x421CD7, 0xE9, 0xC6, 0x04, 0x00, 0x00, 0x90); /* disable point limit progress bar */
WriteProtected<byte>(0x4235F4, 0xE9, 0x9A, 0x00, 0x00, 0x00, 0x90); /* disable greyed out selection animation */
WriteProtected<byte>(0x4237D0, 0xE9, 0x9A, 0x00, 0x00, 0x00, 0x90); /* disable greyed out animation */
WriteProtected<byte>(0x424410, 0xEB, 0x0E);
WriteProtected<byte>(0x42445B, 0xEB, 0x6F);

Patch "Disable Invincibility Music" by "Hyper"
WriteProtected<byte>(0x11DD879, 0xEB, 0x2F);

Patch "Disable FxPipeline Radial Blur" by "Hyper"
WriteProtected<byte>(0x15CE9B0, 0x00);

Patch "Disable Fast Fall Animation" by "Skyth"
WriteProtected<byte>(0x111913A, 0xEB);

Patch "Force S-Rank" by "brianuuu"
string code = @"mov dword ptr [ebx+0x170],4
mov dword ptr [ebx+0x174],4
movq xmm0,qword ptr [eax+0x10]"
WriteAsmHook(code, 0xCFE22B, HookBehavior.Replace)

Patch "Force A-Rank" by "brianuuu"
string code = @"mov dword ptr [ebx+0x170],3
mov dword ptr [ebx+0x174],3
movq xmm0,qword ptr [eax+0x10]"
WriteAsmHook(code, 0xCFE22B, HookBehavior.Replace)

Patch "Force B-Rank" by "brianuuu"
string code = @"mov dword ptr [ebx+0x170],2
mov dword ptr [ebx+0x174],2
movq xmm0,qword ptr [eax+0x10]"
WriteAsmHook(code, 0xCFE22B, HookBehavior.Replace)

Patch "Force C-Rank" by "brianuuu"
string code = @"mov dword ptr [ebx+0x170],1
mov dword ptr [ebx+0x174],1
movq xmm0,qword ptr [eax+0x10]"
WriteAsmHook(code, 0xCFE22B, HookBehavior.Replace)

Patch "Force D-Rank" by "brianuuu"
string code = @"mov dword ptr [ebx+0x170],0
mov dword ptr [ebx+0x174],0
movq xmm0,qword ptr [eax+0x10]"
WriteAsmHook(code, 0xCFE22B, HookBehavior.Replace)

Code "3D Spindash Doesn't Crash" by "Chimera"
WriteProtected<uint>(0x16D8CD4, 0x11D6140) /* Replaces the vftable entry for classic's 3D spindash update with his slide. */

Patch "Boost Particles go to Sonic" by "brianuuu"
WriteProtected<byte>(0x10967B4,0xA1,0xF0,0xE2,0xE5,0x01,0x85,0xC0,0x0F,0x84,0x27,0x01,0x00,0x00,0x8B,0x80,0x10)
WriteProtected<byte>(0x10967C4,0x01,0x00,0x00,0x8B,0x80,0xAC,0x00,0x00,0x00,0x85,0xC0,0x0F,0x84,0x13,0x01,0x00)
WriteProtected<byte>(0x10967D4,0x00,0x8B,0x40,0x10,0xF3,0x0F,0x10,0x50,0x74,0xBA,0x00,0x00,0x00,0x3F,0x66,0x0F)
WriteProtected<byte>(0x10967E4,0x6E,0xC2,0xF3,0x0F,0x58,0xD0,0xF3,0x0F,0x10,0x40,0x70,0xF3,0x0F,0x10,0x48,0x78)
WriteProtected<byte>(0x10967F4,0x8B,0x55,0x08,0xF3,0x0F,0x11,0x42,0x10,0xF3,0x0F,0x11,0x52,0x14,0xF3,0x0F,0x11)
WriteProtected<byte>(0x1096804,0x4A,0x18,0xE9,0xDD,0x00,0x00,0x00)

Patch "Disable Grind Rail Lock-on" by "brianuuu"
WriteProtected<byte>(0x121EDA4, 0xE9, 0xAD, 0x00, 0x00, 0x00)

Patch "Disable Blue Trail" by "Hyper"
WriteProtected<byte>(0xE5FDE5, 0xE9, 0x19, 0x01, 0x00, 0x00);

Patch "Always Play Regular Results Music" by "M&M"
WriteProtected<byte>(0xCFD4CA, 0x00, 0x39)

Patch "Always Play S-Rank Results Music" by "M&M"
WriteProtected<byte>(0xCFD4E8, 0xF8, 0x38)

Patch "Only Play Results Intro" by "M&M"
WriteProtected<byte>(0xCFD47F, 0xE9, 0x95, 0x00, 0x00, 0x00)
WriteProtected<byte>(0xCFD484, 0xC3)
WriteNop(0xCFD485, 3)

Patch "Disable Fast Music" by "Hyper"
WriteNop(0xE2E30F, 2);

Patch "Always Use Fast Music" by "Hyper"
WriteProtected<byte>(0xE2E30F, 0xEB);
WriteNop(0xE2E3A2, 2);
WriteProtected<byte>(0xE2E3AC, 0xEB, 0x0E);

Patch "Disable Dropped Rings" by "Hyper"
WriteProtected<byte>(0x1055002, 0xE9, 0xBD, 0x03, 0x00, 0x00);

Patch "Restore Right Stick Camera Controls" by "Skyth & Ahremic"
//=====//
// Pan //
//=====//
static double PanSmoothingRate = 0.65;
fixed (double* pPanSmoothingRate = &PanSmoothingRate)
	WriteProtected(0x10E723E, (uint)pPanSmoothingRate);

// X
WriteAsmHook(@"
movss xmm0, ds:0x1E77B74
shufps xmm0, xmm0, 0
cvtps2pd xmm0, xmm0
movapd xmm3, xmm0
movsd xmm0, ds:0x1464F30
subsd xmm3, xmm2
", 0x10E7232, HookBehavior.Replace);

// Y
WriteAsmHook(@"
movss xmm0, ds:0x1E77B78
shufps xmm0, xmm0, 0
cvtps2pd xmm0, xmm0
movapd xmm4, xmm0
movsd xmm0, ds:0x1703C98
cvtps2pd xmm3, xmm1
", 0x10E7265, HookBehavior.Replace);

//========//
// Orient //
//========//

// X
WriteAsmHook(@"
movss xmm1, ds:0x1E77B74
mulss xmm1, ds:0x13E08A4
shufps xmm1, xmm1, 0
cvtps2pd xmm3, xmm1
xorps xmm1, xmm1
add esp, 8
", 0x10EE053, HookBehavior.Replace);

// Y
WriteAsmHook(@"
movss xmm1, ds:0x1E77B78
mulss xmm1, ds:0x13E40B8
xorps xmm1, ds:0x1703930
shufps xmm1, xmm1, 0
cvtps2pd xmm0, xmm1
xorps xmm1, xmm1
cvtps2pd xmm2, xmm2
", 0x10EE030, HookBehavior.Replace);

Patch "All Cameras are Controllable" by "Skyth"
WriteNop(0x10E7515, 2);

Code "Unleashed Style Camera" by "Skyth"
static bool initialized = false;
static double _0 = 0.0;
static double _50_60 = 50.0 / 60.0;

if (!initialized)
{
	WriteAsmHook("mulss xmm0, ds:0x14AF8CC", 0x10ED952, HookBehavior.After);
	WriteAsmHook("mulss xmm3, ds:0x14AF8CC", 0x10EDB4C, HookBehavior.After);
	WriteAsmHook("mulss xmm3, ds:0x14AF8CC", 0x10EDAC2, HookBehavior.After);

	WriteAsmHook("cvtps2pd xmm2, xmm1; mulsd xmm0, xmm2", 0x10ED123, HookBehavior.Replace);
	WriteAsmHook("movss xmm1, ds:0x1559A98", 0x10ED12F, HookBehavior.After);
	WriteAsmHook("xorpd xmm0, ds:0x1703930; addsd xmm0, ds:0x1703940", 0x10ED14A, HookBehavior.Before);

	fixed (double* p0 = &_0)
	fixed (double* p50_60 = &_50_60)
	{
		WriteProtected<uint>(0x10ED879, (uint)p0);
		WriteProtected<uint>(0x10ED884, (uint)p50_60);
	}
	
	WriteProtected<byte>(0x10EDEC4, 0xEB);
	WriteProtected<byte>(0x10EE1AA, 0x0F, 0x57, 0xC0, 0x90, 0x90, 0x90, 0x90, 0x90);

	initialized = true;
}

Write(0x1A48BFC, 3.0f); // DRIFT_TARGET_SIDE_OFFSET_SCALE
Write(0x1A48B60, 60.0f); // CAMERA_MAX_PITCH
Write(0x1A48B6C, 20.0f); // CAMERA_PITCH_MOVE_VELOCITY_MIN

Patch "Use Object Blur On All Player Models" by "Skyth"
WriteProtected<uint>(0x13E0000, 8); // MTFx
WriteProtected<uint>(0x10CDE69, 1); // FxPipeline

Patch "Collect Boost Particle Instantly" by "brianuuu"
WriteNop(0x1124433, 6)
WriteProtected<byte>(0x1124489, 0xEB)
WriteNop(0x11244C1, 6)
WriteNop(0x11244D0, 6)
WriteProtected<uint>(0x112459B, 0xFFFFFFFF)
