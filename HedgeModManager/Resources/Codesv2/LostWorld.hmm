!!VERSION 1.0

Patch "Don't Lose Rings" by "Sajid"
WriteNop(ASLR(0x866900), 2)

Patch "Disable Super Music" by "Sajid"
WriteNop(ASLR(0x91ABAD), 6)

Patch "Invisible Cloak Sonic (Requires jump or spin)" by "Muzzarino"
WriteNop(ASLR(0x85C68E), 6)

Patch "Enable Stage Retry Option" by "Sajid"
WriteAsmHook
(
	ASLR(0x005169E3),
	HookBehavior.After,
	"mov DWORD PTR [ebp+8], 1"
)

Patch "Widescreen Support" by "Brandondorf9999"
uint baseAddress = (uint)0x400C00
WriteProtected<uint>(ASLR(baseAddress + 0x16C8D),  (uint)ASLR(0x01082E00))
WriteProtected<byte>(ASLR(baseAddress + 0xBF7AF),  0x56)
WriteProtected<byte>(ASLR(baseAddress + 0x1333D7), 0x66, 0x81, 0x7D, 0x04, 0x69, 0x06, 0x74, 0x08, 0x66, 0x81, 0x7D, 0x70, 0xB0, 0x78, 0x75, 0x11, 0xC7, 0x45, 0x10, 0x00, 0x00, 0x80, 0x3F, 0xF3, 0x0F, 0x59, 0x55, 0x10, 0xF3, 0x0F, 0x59, 0x45, 0x10, 0xF3, 0x0F, 0x11, 0x50, 0x14, 0xC3)
WriteProtected<byte>(ASLR(baseAddress + 0x200205), 0x81, 0x7D, 0x10, 0x39, 0x8E, 0xE3, 0x3F, 0x7D, 0x27, 0xF3, 0x0F, 0x10, 0x7D, 0x10, 0xC7, 0x45, 0x10, 0x39, 0x8E, 0xE3, 0x3F, 0xF3, 0x0F, 0x5E, 0x45, 0x10, 0xF3, 0x0F, 0x5E, 0x7D, 0x10, 0xF3, 0x0F, 0x59, 0xD7, 0xC7, 0x45, 0x10, 0x00, 0x00, 0x80, 0x3F, 0xF3, 0x0F, 0x59, 0x55, 0x10, 0xC3, 0xF3, 0x0F, 0x5E, 0x45, 0x10, 0xC3)
WriteProtected<byte>(ASLR(baseAddress + 0x566C6C), 0xE8, 0x94, 0x95, 0xC9, 0xFF, 0xE8, 0x61, 0xC7, 0xBC, 0xFF)
WriteProtected<byte>(ASLR(baseAddress + 0x795235), 0xF3, 0x0F, 0x10, 0x45, 0xC4, 0xF3, 0x0F, 0x5E, 0x45, 0xC8, 0xF3, 0x0F, 0x10, 0x7D, 0x9C, 0xF3, 0x0F, 0x5E, 0xF8, 0xE9, 0xD5, 0x54, 0x09, 0x00)
WriteProtected<byte>(ASLR(baseAddress + 0x826362), 0xE8, 0xA9, 0xD0, 0x03, 0x00, 0x89, 0x45, 0x9C, 0x89, 0x55, 0x98, 0xD9, 0x5D, 0xA8, 0xDB, 0x45, 0x9C, 0xDB, 0x45, 0x98, 0xD9, 0x5D, 0x98, 0xD9, 0x5D, 0x9C, 0xD9, 0x45, 0xA8, 0xC3)
WriteProtected<byte>(ASLR(baseAddress + 0x82A3CA), 0xE8, 0x93, 0xBF, 0xFF, 0xFF, 0x90)
WriteProtected<byte>(ASLR(baseAddress + 0x82A3D8), 0xE8, 0x05, 0x01, 0x00, 0x00, 0x90, 0x90, 0x90, 0xF3, 0x0F, 0x11, 0x05, 0x00, 0x2E, 0x08, 0x01, 0x8B, 0xC1, 0xE8, 0x96, 0x03, 0x00, 0x00, 0x90, 0x90, 0x90)
WriteProtected<byte>(ASLR(baseAddress + 0x82A40A), 0xE8, 0xD3, 0x00, 0x00, 0x00, 0x90, 0x90, 0x90, 0xF3, 0x0F, 0x11, 0x05, 0x00, 0x2E, 0x08, 0x01, 0x8B, 0xC7, 0x89, 0x4D, 0xF4, 0xE8, 0x11, 0xAE, 0xF6, 0xFF, 0x90, 0x90, 0x90)
WriteProtected<byte>(ASLR(baseAddress + 0x82A4E2), 0xF3, 0x0F, 0x10, 0x45, 0x9C, 0xF3, 0x0F, 0x5E, 0x45, 0x98, 0xC3)
WriteProtected<byte>(ASLR(baseAddress + 0x82A537), 0xE9, 0xD6, 0xFE, 0xFF, 0xFF)
WriteProtected<byte>(ASLR(baseAddress + 0x82A722), 0xF3, 0x0F, 0x2D, 0xC7, 0xF3, 0x0F, 0x59, 0xC7, 0xF3, 0x0F, 0x2D, 0xCF, 0xC3)
WriteProtected<byte>(ASLR(baseAddress + 0x82A785), 0xF3, 0x0F, 0x10, 0x45, 0x9C, 0xF3, 0x0F, 0x2C, 0xD0, 0xC3)
WriteProtected<byte>(ASLR(baseAddress + 0x8604A4), 0x61)
WriteProtected<byte>(ASLR(baseAddress + 0x863409), 0xB8, 0x00, 0x05, 0x00, 0x00, 0xEB, 0x17, 0xA1, 0x2C, 0x07, 0xF6, 0x00, 0x8B, 0x15, 0x30, 0x07, 0xF6, 0x00)
WriteProtected<byte>(ASLR(baseAddress + 0x863427), 0xBA, 0xD0, 0x02, 0x00, 0x00, 0xC3)
WriteProtected<byte>(ASLR(baseAddress + 0x86E8E2), 0x23)

WriteProtected<uint>(ASLR(0x00C64011), (uint)ASLR(0x00F6072C))
WriteProtected<uint>(ASLR(0x00C64017), (uint)ASLR(0x00F60730))
WriteProtected<uint>(ASLR(0x00C2AFE4), (uint)ASLR(0x01082E00))
WriteProtected<uint>(ASLR(0x00C2B016), (uint)ASLR(0x01082E00))

Patch "21:9 (2560x1080) In-Game Resolution" by "ĐeäTh"
WriteProtected<int>(ASLR(0xD56D30), 0x4017B426)

Patch "21:9 (3440x1440) In-Game Resolution" by "ĐeäTh"
WriteProtected<int>(ASLR(0xD56D30), 0x4018E38E)

Patch "21:9 (3840x1600) In-Game Resolution" by "ĐeäTh"
WriteProtected<int>(ASLR(0xD56D30), 0x4019999A)

Patch "32:9 In-Game Resolution" by "ĐeäTh"
WriteProtected<int>(ASLR(0xD56D30), 0x40638E39)

Code "Automatic In-Game Resolution" by "Muzzarino"
var ptr = GetPointer(ASLR(0xFD3CA8))
WriteProtected<float>(ASLR(0xD56D30), ptr != 0 ? (float)(Read<uint>(ptr + 0xF8)) / (float)(Read<uint>(ptr + 0xFC)) : 16f / 9f)
WriteProtected<double>(ASLR(0xEB2E00), (Double)Read<float>(ASLR(0xD56D30)))
WriteProtected<float>(ASLR(0xFB6AF0), 2f * (float)Math.Atan((float)Math.Tan(60f * 0.00872664625997164788461845384244) / (Read<float>(ASLR(0xD56D30)) < 16f / 9f ? Read<float>(ASLR(0xD56D30)) : 16f / 9f) * (16f / 9f)))
WriteProtected<float>(ASLR(0xD6F364), 720f / (Read<float>(ASLR(0xD56D30)) < 16f / 9f ? Read<float>(ASLR(0xD56D30)) : 16f / 9f) * (16f / 9f)))
WriteProtected<float>(ASLR(0xD6F360), Read<float>(ASLR(0xD6F364)) * Read<float>(ASLR(0xD56D30)))

float aspectRatio = Read<float>(ASLR(0x00D56D30));
uint widthRatio = (uint)(aspectRatio * 9);
uint width = (720 * widthRatio) / 9;
WriteProtected<uint>(ASLR(0x0050EBC5), width);

string code = $@"mulss xmm0,[{ASLR(0xE737E4)}]
cvtps2pd xmm0,xmm0
pushad
mov eax,{ASLR(0xC76D12)}
call eax
mov eax,{ASLR(0xC64010)}
call eax
cvtsi2sd xmm2,eax
cvtsi2sd xmm1,edx
popad
divsd xmm2,xmm1
movss xmm1,[esp+0x4]
cvtps2pd xmm1,xmm1
minsd xmm1,xmm2
divsd xmm1,xmm2
divsd xmm0,xmm1
sub esp,0x8
movsd [esp],xmm0
fld qword ptr [esp]
add esp,0x8
fld1
fpatan
fdiv dword ptr [{ASLR(0xE737E4)}]
fstp dword ptr [esp]
mov eax,{ASLR(0x8FF5B0)}
call eax"

string code2 = $@"mulss xmm0,[{ASLR(0xE737E4)}]
cvtps2pd xmm0,xmm0
pushad
mov eax,{ASLR(0xC76D12)}
call eax
mov eax,{ASLR(0xC64010)}
call eax
cvtsi2sd xmm2,eax
cvtsi2sd xmm1,edx
popad
divsd xmm2,xmm1
movss xmm1,[esp+0x8]
cvtps2pd xmm1,xmm1
minsd xmm1,xmm2
divsd xmm1,xmm2
divsd xmm0,xmm1
sub esp,0x8
movsd [esp],xmm0
fld qword ptr [esp]
add esp,0x8
fld1
fpatan
fdiv dword ptr [{ASLR(0xE737E4)}]
fstp dword ptr [esp+0x4]
mov eax,{ASLR(0x967820)}
call eax"

string code3 = $@"mov eax,[{ASLR(0xFD3CA8)}]
test eax,eax
je NoVPaddress
mov edx,[eax+0xFC]
mov eax,[eax+0xF8]
NoVPaddress:"

string code4 = $@"cvtdq2ps xmm0,xmm0
cvtdq2ps xmm1,xmm1
sub esp,0x8
movss [esp],xmm0
movss [esp+0x4],xmm1
mov eax,[{ASLR(0xFD3CA8)}]
movd xmm0,[eax+0xF8]
movd xmm1,[eax+0xFC]
mov eax,{ASLR(0xC64010)}
call eax
sar eax,1
sar edx,1
cvtdq2ps xmm0,xmm0
cvtdq2ps xmm1,xmm1
divss xmm0,xmm1
movss xmm4,xmm0
movss xmm1,[esp]
divss xmm1,[esp+0x4]
minss xmm0,xmm1
divss xmm0,xmm1
divss xmm1,xmm4
mulss xmm1,xmm0
cvtsi2ss xmm4,eax
movss xmm5,xmm4
divss xmm4,xmm1
subss xmm4,xmm5
addss xmm2,xmm4
cvtsi2ss xmm4,edx
movss xmm5,xmm4
divss xmm4,xmm0
subss xmm4,xmm5
addss xmm3,xmm4
movss xmm4,xmm0
movss xmm5,xmm1
movss xmm0,[esp]
movss xmm1,[esp+0x4]
mulss xmm0,xmm5
mulss xmm1,xmm4
add esp,0x8
cvtps2dq xmm0,xmm0
cvtps2dq xmm1,xmm1"

string code5 = $@"mov eax,{ASLR(0xC64010)}
call eax
cvtsi2ss xmm3,eax
cvtsi2ss xmm2,edx
divss xmm3,xmm2"

string code6 = $@"mov eax,{ASLR(0xC76F67)}
call eax
movss xmm1,xmm0
divss xmm0,[{ASLR(0xD56D30)}]
divss xmm0,[{ASLR(0xD56D2C)}]
maxss xmm0,xmm1"

string code7 = $@"movss xmm0,xmm5
divss xmm0,[edi+0x1B4]
minss xmm0,[{ASLR(0xD56D30)}]
divss xmm0,[{ASLR(0xD56D30)}]
mulss xmm5,xmm0"

string code8 = $@"movss xmm4,[edi+0x1B0]
divss xmm4,[edi+0x1B4]
maxss xmm4,[{ASLR(0xD56D30)}]
divss xmm4,[{ASLR(0xD56D30)}]
divss xmm7,xmm4"

string code9 = $@"movss xmm6,[{ASLR(0xD56D30)}]
divss xmm0,[{ASLR(0xD56D2C)}]
minss xmm6,xmm0
divss xmm6,xmm0
movss xmm0,xmm6"

string code10 = $@"movss xmm5,[{ASLR(0xE72E24)}]
divss xmm5,[{ASLR(0xD56D2C)}]
minss xmm5,[{ASLR(0xD56D30)}]
divss xmm2,xmm5
mulss xmm2,[{ASLR(0xD56D30)}]"

string code11 = $@"movss xmm5,[{ASLR(0xE72E24)}]
divss xmm5,[{ASLR(0xD56D2C)}]
maxss xmm5,[{ASLR(0xD56D30)}]
mulss xmm1,xmm5
divss xmm1,[{ASLR(0xD56D30)}]"

if (Read<byte>(ASLR(0x4178AB)) == 0xE8)
{
	WriteAsmHook(code, ASLR(0x4178AB), HookBehavior.Replace)
	WriteAsmHook(code, ASLR(0x419601), HookBehavior.Replace)
	WriteAsmHook(code2, ASLR(0x41E9D0), HookBehavior.Replace)
	WriteAsmHook(code2, ASLR(0x42589C), HookBehavior.Replace)
	WriteAsmHook(code2, ASLR(0x4272F5), HookBehavior.Replace)
	WriteAsmHook(code2, ASLR(0x427DF0), HookBehavior.Replace)
	WriteAsmHook(code2, ASLR(0x428878), HookBehavior.Replace)
	WriteAsmHook(code2, ASLR(0x4292FE), HookBehavior.Replace)
	WriteAsmHook(code2, ASLR(0x437490), HookBehavior.Replace)
	WriteAsmHook(code2, ASLR(0x43CB11), HookBehavior.Replace)
	WriteAsmHook(code2, ASLR(0x530664), HookBehavior.Replace)
	WriteAsmHook(code3, ASLR(0x5305F9), HookBehavior.Replace)
	WriteAsmHook(code4, ASLR(0x4A824C), HookBehavior.Before)
	WriteAsmHook(code5, ASLR(0x401737), HookBehavior.Replace)
	WriteAsmHook(code6, ASLR(0x43D41E), HookBehavior.Replace)
	WriteAsmHook(code6, ASLR(0x441D41), HookBehavior.Replace)
	WriteAsmHook(code7, ASLR(0x49C380), HookBehavior.Before)
	WriteAsmHook(code8, ASLR(0x49C3BA), HookBehavior.Before)
	WriteAsmHook(code9, ASLR(0x41EA22), HookBehavior.Before)
	WriteAsmHook(code10, ASLR(0x8FF420), HookBehavior.Before)
	WriteAsmHook(code11, ASLR(0x8FF456), HookBehavior.Before)
}

Patch "Disable Lockon (Except for Unbeatable Bosses)" by "Sajid"
WriteProtected<uint>(ASLR(0x00537D15), 0x5005)
WriteProtected<uint>(ASLR(0x0053AFD1), 0x1003)
WriteProtected<uint>(ASLR(0x005A8121), 0x1003)
WriteProtected<uint>(ASLR(0x005C7A91), 0x1003)
WriteProtected<uint>(ASLR(0x00587A71), 0x1003)
WriteProtected<uint>(ASLR(0x0059889A), 0x5005)
WriteProtected<uint>(ASLR(0x0058FDC1), 0x1003)

Patch "Disable Voice Option Completely" by "M&M"
WriteNop(ASLR(0x4A3D82), 5)

Patch "Enable DLC Music in Battle Mode" by "ĐeäTh"
WriteNop(ASLR(0x0095B570), 6)

Patch "Sideways Wall Jump Fix" by "Sajid"
WriteNop(ASLR(0x008C142C), 2)

Patch "DLC Stages Always Replayable" by "ĐeäTh"
WriteNop(ASLR(0x0090D2BC), 2);
String code = $@"mov eax, {ASLR(0x0090D210)}
push 0
push 0
push 0
mov ecx, esi
call eax
mov eax, {ASLR(0x0090D210)}
push 0
push 0
push 1
mov ecx, esi
call eax
mov eax, {ASLR(0x0090D210)}
push 0
push 0
push 2
mov ecx, esi
call eax
mov ecx, [ebp+0xC]
mov eax, [ecx]
cmp eax, -4";
WriteAsmHook
(
	ASLR(0x00911F2D),
	HookBehavior.Replace,
	code
)

WriteAsmHook
(
	ASLR(0x00912332),
	HookBehavior.After,
	"mov edi, 1"
)
WriteProtected<byte>(ASLR(0x00912338), 0x57);
WriteProtected<byte>(ASLR(0x00912326), 0x6A, 0x00);
WriteNop(ASLR(0x0094594F), 12);

Patch "Disable DLC Prizes" by "ĐeäTh"
WriteNop(ASLR(0x0094595B), 12);
WriteNop(ASLR(0x00945630), 5);

Patch "Fix Depth Of Field Draw Order" by "Sajid"
static int p_DofRes = (int)ASLR(0x00FEFC7C);
static int p_GrassRes = (int)ASLR(0x00FB6D1C);
static int p_ShadowRes = (int)ASLR(0x00FB6D1D);
static int p_RetAddress = (int)ASLR(0x00904E94);

WriteAsmHook
(
    $@"mov BYTE PTR [edi+28Ch], 0
    movzx eax,byte ptr [{p_DofRes}]
    mov [edi+28Ch], al
    cmp byte ptr [{p_GrassRes}], 0
    sete cl
    mov [edi+49Ch], cl
    mov al, [{p_ShadowRes}]
    mov [edi+4F4h], al

    mov eax, {p_RetAddress}
    jmp eax",
    ASLR(0x00904E64), HookBehavior.Replace
)

Patch "1280x720 Movie Player" by "ĐeäTh"
static float ms_RenderTextureMultiplier = 1.0f;
fixed(float* multiplierPtr = &ms_RenderTextureMultiplier)
{
	WriteAsmHook
	(
		ASLR(0x0049C398),
		HookBehavior.Replace,
		$"mulss xmm5, [{(uint)multiplierPtr}]"
	)

	WriteAsmHook
	(
		ASLR(0x0049C3C2),
		HookBehavior.Replace,
		$"mulss xmm7, [{(uint)multiplierPtr}]"
	)
}

WriteProtected<float>(ASLR(0x00D61CE8), 1280);
WriteProtected<float>(ASLR(0x00D593B0), 720);

Patch "1920x1080 Movie Player" by "ĐeäTh"
static float ms_RenderTextureMultiplier = 1.0f;
fixed(float* multiplierPtr = &ms_RenderTextureMultiplier)
{
	WriteAsmHook
	(
		ASLR(0x0049C398),
		HookBehavior.Replace,
		$"mulss xmm5, [{(uint)multiplierPtr}]"
	)

	WriteAsmHook
	(
		ASLR(0x0049C3C2),
		HookBehavior.Replace,
		$"mulss xmm7, [{(uint)multiplierPtr}]"
	)
}

WriteProtected<float>(ASLR(0x00D61CE8), 1920);
WriteProtected<float>(ASLR(0x00D593B0), 1080);

Patch "2560x1440 Movie Player" by "ĐeäTh"
static float ms_RenderTextureMultiplier = 1.0f;
fixed(float* multiplierPtr = &ms_RenderTextureMultiplier)
{
	WriteAsmHook
	(
		ASLR(0x0049C398),
		HookBehavior.Replace,
		$"mulss xmm5, [{(uint)multiplierPtr}]"
	)

	WriteAsmHook
	(
		ASLR(0x0049C3C2),
		HookBehavior.Replace,
		$"mulss xmm7, [{(uint)multiplierPtr}]"
	)
}

WriteProtected<float>(ASLR(0x00D61CE8), 2560);
WriteProtected<float>(ASLR(0x00D593B0), 1440);

Patch "3840x2160 Movie Player" by "ĐeäTh"
static float ms_RenderTextureMultiplier = 1.0f;
fixed(float* multiplierPtr = &ms_RenderTextureMultiplier)
{
	WriteAsmHook
	(
		ASLR(0x0049C398),
		HookBehavior.Replace,
		$"mulss xmm5, [{(uint)multiplierPtr}]"
	)

	WriteAsmHook
	(
		ASLR(0x0049C3C2),
		HookBehavior.Replace,
		$"mulss xmm7, [{(uint)multiplierPtr}]"
	)
}

WriteProtected<float>(ASLR(0x00D61CE8), 3840);
WriteProtected<float>(ASLR(0x00D593B0), 2160);

Patch "2560x1080 Movie Player" by "ĐeäTh"
static float ms_RenderTextureMultiplier = 1.0f;
fixed(float* multiplierPtr = &ms_RenderTextureMultiplier)
{
	WriteAsmHook
	(
		ASLR(0x0049C398),
		HookBehavior.Replace,
		$"mulss xmm5, [{(uint)multiplierPtr}]"
	)

	WriteAsmHook
	(
		ASLR(0x0049C3C2),
		HookBehavior.Replace,
		$"mulss xmm7, [{(uint)multiplierPtr}]"
	)
}

WriteProtected<float>(ASLR(0x00D61CE8), 2560);
WriteProtected<float>(ASLR(0x00D593B0), 1080);

Patch "3440x1440 Movie Player" by "ĐeäTh"
static float ms_RenderTextureMultiplier = 1.0f;
fixed(float* multiplierPtr = &ms_RenderTextureMultiplier)
{
	WriteAsmHook
	(
		ASLR(0x0049C398),
		HookBehavior.Replace,
		$"mulss xmm5, [{(uint)multiplierPtr}]"
	)

	WriteAsmHook
	(
		ASLR(0x0049C3C2),
		HookBehavior.Replace,
		$"mulss xmm7, [{(uint)multiplierPtr}]"
	)
}

WriteProtected<float>(ASLR(0x00D61CE8), 3440);
WriteProtected<float>(ASLR(0x00D593B0), 1440);

Patch "5120x2160 Movie Player" by "ĐeäTh"
static float ms_RenderTextureMultiplier = 1.0f;
fixed(float* multiplierPtr = &ms_RenderTextureMultiplier)
{
	WriteAsmHook
	(
		ASLR(0x0049C398),
		HookBehavior.Replace,
		$"mulss xmm5, [{(uint)multiplierPtr}]"
	)

	WriteAsmHook
	(
		ASLR(0x0049C3C2),
		HookBehavior.Replace,
		$"mulss xmm7, [{(uint)multiplierPtr}]"
	)
}

WriteProtected<float>(ASLR(0x00D61CE8), 5120);
WriteProtected<float>(ASLR(0x00D593B0), 2160);
