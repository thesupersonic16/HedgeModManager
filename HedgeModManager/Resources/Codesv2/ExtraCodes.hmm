Code "Enable Tricks in Cyber Space" in "Gameplay" by "WasifBoomz" does
/*
Allows Sonic to use air tricks during Cyber Space levels.

Notes;
- This does not enable being able to fling off of terrain.
*/
static int isCyber = 0;
static bool isInitialised = false;
{
	if(!isInitialised) {
		fixed (int* pIsCyber = &isCyber) {
			
			/* 0x14BB55230 */
			long CallAddress1 = ScanSignature
			(
				"\x40\x53\x48\x83\xEC\x20\x48\x8B\x41\x38\x0F\xB6\xDA\x48\x8B\x88\x08\x01\x00\x00\x48\x85\xC9\x74\x1F\xBA\xFF\x9E\x82\x22",
				"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
			);

			/* 0x1408F62C0 */
			long CallAddress2 = ScanSignature
			(
				"\x40\x53\x48\x83\xEC\x20\xBA\x1A\x00\x00\x00",
				"xxxxxxxxxxx"
			);
			
			/* Handling the Tumble State */
			WriteAsmHook
			(
				$@"
					mov rbx, {(long)pIsCyber}
					cmp byte ptr [rbx], 1
					jz cyber
					
				original:
					mov  rcx, rdi
					mov  rbx, {(long)CallAddress1}
					call rbx
									
					mov  rcx, rdi
					mov  rax, {(long)CallAddress2}
					call rax
					jmp end

				cyber:
					mov al, 1
				end:
				",
				
				/* 0x14B3E7548 */
				ScanSignature
				(
					"\x48\x89\xF9\xE8\xCC\xCC\xCC\xCC\x48\x89\xF9\xE8\xCC\xCC\xCC\xCC\x84\xC0",
					"xxxx????xxxx????xx"
				),
				
				HookBehavior.Replace
			);
	
			/* 0x14B74C5F6 */
			long HandleAddress = ScanSignature
			(
				"\x80\x79\x3D\x00\x48\x89\xCB",
				"xxxxxxx"
			);
			
			long JumpAddress = HandleAddress + 0x1E;
			
			WriteNop
			(
				HandleAddress,
				0x1E
			);
			
			/* Unscannable */
			long ChangeFlagAddress = 0x1408F9C10;
			
			/* Handling Springs, Jump Boards, and Dash Rings */
			WriteAsmHook
			(
				$@"
					mov rax, {(long)pIsCyber}
					cmp byte ptr [rax], 1
					jz  cyberJump

				originalCheck:
					cmp  byte ptr [rcx+3Dh], 0
					mov  rbx, rcx
					jz   end
				
				cyberJump:
					mov  rcx, [rcx+20h]
					mov  r8b, 1
					mov  edx, 28h
					mov  rax, {(long)ChangeFlagAddress}
					call rax
					mov  byte ptr [rbx+3Dh], 0
				end:
				",
				
				HandleAddress,
				
				HookBehavior.Replace
			);
		}
		isInitialised = true;
	}

	if(BlackboardStatus.Get() == 0)
		return;

	isCyber = Bitwise.Test(*BlackboardStatus.GetWorldFlags(), (uint)BlackboardStatus.WorldFlags.IsCyberSpace) ? 1 : 0
}
Code "Additive Springs on Boost" in "Gameplay" by "WasifBoomz" does "Keeps your velocity upon hitting a vertical spring while boosting"
//
#lib "Sonic"
#lib "Bitwise"
#lib "BlackboardStatus"

#load "System.Numerics.dll"

using System;
using System.Numerics;
using System.Collections.Generic;

static int framesSinceHit = 0;
static int boosting = 0;
static bool isInitialised = false;
static Vector3 prevVelocity;
//
{
	Sonic.Kinematics kinematics = Sonic.Kinematics.Get();

	if(!isInitialised) {
		long aSpringJump = ScanSignature(
			"SPRING_JUMP",
			"xxxxxxxxxxx"
		);

		long ChangeAnimLocation = ScanSignature(
			"\x40\x53\x48\x83\xEC\x20\xF6\x81\x78\x01\x00\x00\x10\x48\x8B\xDA",
			"xxxxxxxxxxxxxxxx"
		);

		fixed (int* pFramesSinceHit = &framesSinceHit, pBoosting = &boosting)
		{
			WriteAsmHook
			(
				$@"
					mov  rax, {(long)aSpringJump}
					cmp  rdx, rax
					jnz  original
					mov  rcx, {(long)pBoosting}
					cmp  byte ptr [rcx], 0
					jz   original
					mov  rax, {(long)pFramesSinceHit}
					mov  byte ptr [rax], 1
				original:
					mov  r8b, 0FEh
					mov  rcx, rbx
					mov  rax, {(long)ChangeAnimLocation}
					call rax
					mov  edx, [rbp+0DCh]
				",
					
				/* 0x1408C1B02 */
				ScanSignature(
					"\x41\xB0\xFE\x48\x8B\xCB\xE8\xCC\xCC\xCC\xCC\x8B\x95\xDC\x00\x00\x00",
					"xxxxxxx????xxxxxx"
				),
					
				HookBehavior.Replace
			);
		}

		isInitialised = true;
	}

	if (kinematics == null)
        return;
	
	if(BlackboardStatus.Get() == 0)
		return;

	boosting = Bitwise.Test(*BlackboardStatus.GetStateFlags(), (uint)BlackboardStatus.StateFlags.IsBoost) ? 1 : 0;

	switch (framesSinceHit){
		case 0:
			prevVelocity = *kinematics.Velocity;
			break;
		case 1:
			Sonic.State.SetState(16);
			framesSinceHit++;
			break;
		case 2:
			if(Sonic.Kinematics.GetHorizontalMagnitude() < Math.Abs(kinematics.Velocity->Y))
				*kinematics.Velocity += new Vector3(prevVelocity.X,0,prevVelocity.Z);
			framesSinceHit = 0;
			break;
		default:
			framesSinceHit = 1;
			break;
	}
}

Patch "Disable Double Jump" in "Gameplay" by "WasifBoomz"
{
	//Second to last function in Double Jump vftable
	WriteProtected<byte>(
		0x141364B18,
		0x70, 0x5B, 0x07
	);
}

Patch "Force Screen Space Global Illumination" in "Graphics" by "WasifBoomz" does
/*
Forces Screen Space Global Illumination, giving the world more atmosphere and better lighting.

Notes;
- This effect is not perfect and may result in artifacts.
- This may have a noticeable impact on performance.
*/
{
    //FxSSGIParameter
    WriteAsmHook
    (
        $@"
            ;Enable SSGI
            mov byte ptr [r8], 1
			
			;Set Intensity to 6
			mov dword ptr [r8+4], 0x41800000
			
			;Enable Albedo
            mov byte ptr [r8+8], 1
			
			;Enable Parameter
            mov byte ptr [r8+9], 1
			
			;Enable Denoiser
			mov byte ptr [r8+12], 1
			
			;Set Ray Length to 6
			mov dword ptr [r8+16], 0x40C00000
        ",
			
        /* 0x1401EE3FD */
        ScanSignature
        (
            "\x49\x3B\xC2\x0F\x85\x76\x02\x00\x00",
			"xxxxxxxxx"
        ),
			
        HookBehavior.After
    );
}

Patch "Custom Resolution Scale" in "Graphics" by "WasifBoomz" does "Read the description, dumbass"
{
    WriteAsmHook
    (
		//Replace the hex value below, "0x3DCCCCCD" (0.1), with the float scale of your choice.
		//https://gregstoll.com/~gregstoll/floattohex/ is a good website to convert float into hex.
        $@"
			push rdi
			sub  rsp, 50h
			mov  rbx, rcx
			mov  rsi, r8
			mov  rcx, [rcx+18h]
			mov  rdi, rdx
			mov  dword ptr [rbx+1Ch], 0x3DCCCCCD
        ",
			
        /* 0x14107FA7A */
        ScanSignature
        (
            "\x57\x48\x83\xEC\x50\x48\x8B\xD9\x49\x8B\xF0",
			"xxxxxxxxxxx"
        ),
			
        HookBehavior.Replace
    );
}

Patch "Disable Decelerate, Wall, Slide, and Not Stand Collision" in "Physics" by "Hyper & WasifBoomz" does
/*
Disables the collision flag that kills all horizontal velocity when jumping.

Example usage;
- The bridge in Kronos above the river.
- The cliffsides in Ares.
*/
//
    static int Seek = 0;
//
{
    fixed (int* pSeek = &Seek)
    {
        WriteAsmHook
        (
            $@"
                mov  r14, qword ptr [rsp + 0x48 + 0xFFFFFFFFFFFFFFD8]
                mov  rdi, qword ptr [rsp + 0x48 + 0xFFFFFFFFFFFFFFE0]
                mov  rsi, qword ptr [rsp + 0x48 + 0xFFFFFFFFFFFFFFE8]
                push rbx
                push rcx
                push rdx
                push r11
                push r15
                mov  rdx, {(long)pSeek}
                mov  rbx, rax
                mov  rbx, [rbx]               ; dereference pointer to collision info map [int64, int32]
                test rbx, rbx                 ; check if null
                jz   exit
                mov  ecx, dword ptr [rbx + 8] ; store vertex count
                imul ecx, 4                   ; multiply vertex count by 4 to get an appropriate iteration size
                mov  rbx, [rbx]               ; dereference pointer to collision info
            iterate:
                cmp  dword ptr [rdx], ecx     ; iterate through vertices to set info for each
                jge  exit
                mov  r15d, dword ptr [rdx]    ; store current iteration
                mov  r11, rbx
                add  r11, r15                 ; add offset to address
                mov  r15d, dword ptr [r11]    ; store current collision info for modification
                and  r15d, 0xFFFFFD3E         ; clear 9th bit
                mov  dword ptr [r11], r15d    ; store modified collision info in original array
                add  dword ptr [rdx], 4       ; increment by 4 (32-bit integers)
                jmp  iterate
            exit:
                mov  dword ptr [rdx], 0       ; reset incrementation
                pop  r15
                pop  r11
                pop  rdx
                pop  rcx
                pop  rbx
            ",

            /* 0x140A9FBF3 */
            ScanSignature
            (
                "\x4C\x8B\x74\x24\x20\x48\x8B\x7C\x24\x28\x48\x8B\x74\x24\x30\x48\x8B\x00",
                "xxxxxxxxxxxxxxxxxx"
            ),

            HookBehavior.Replace
        );
    }
}