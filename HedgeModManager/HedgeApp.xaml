<Application
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:HedgeModManager" 
             xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
             xmlns:pt="http://propertytools.org/wpf"
             x:Class="HedgeModManager.HedgeApp">
    
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Themes/Themes.xaml" />
                <ResourceDictionary Source="Themes/DarkTheme.xaml" />
                <ResourceDictionary Source="Languages/Languages.xaml" />
                <ResourceDictionary Source="Languages/en-AU.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <SolidColorBrush x:Key="ScrollBar.Static.Background" Color="Transparent"/>
            <SolidColorBrush x:Key="ScrollBar.Static.Border" Color="Transparent"/>
            <SolidColorBrush x:Key="ScrollBar.Pressed.Glyph" Color="White"/>
            <SolidColorBrush x:Key="ScrollBar.MouseOver.Glyph" Color="White"/>
            <SolidColorBrush x:Key="ScrollBar.Disabled.Glyph" Color="#BFBFBF"/>
            <SolidColorBrush x:Key="ScrollBar.Static.Glyph" Color="White"/>
            <SolidColorBrush x:Key="ScrollBar.MouseOver.Background" Color="Transparent"/>
            <SolidColorBrush x:Key="ScrollBar.MouseOver.Border" Color="Transparent"/>
            <SolidColorBrush x:Key="ScrollBar.Pressed.Background" Color="#606060"/>
            <SolidColorBrush x:Key="ScrollBar.Pressed.Border" Color="#606060"/>
            <SolidColorBrush x:Key="ScrollBar.Disabled.Background" Color="#F0F0F0"/>
            <SolidColorBrush x:Key="ScrollBar.Disabled.Border" Color="#F0F0F0"/>
            <SolidColorBrush x:Key="ScrollBar.MouseOver.Thumb" Color="#A6A6A6"/>
            <SolidColorBrush x:Key="ScrollBar.Pressed.Thumb" Color="#606060"/>
            <SolidColorBrush x:Key="ScrollBar.Static.Thumb" Color="#CDCDCD"/>
            <Geometry x:Key="StarGeometry">F0 M15,15z M0,0z M12.121,14.994L7.491,11.64 2.845,14.992 4.462,9.322 0,5.723 5.629,5.573 7.521,0 9.383,5.574 15.011,5.726 10.533,9.326z</Geometry>

            <local:EmptyStringToVisibilityConverter x:Key="EmptyStringToVisibilityConverter"/>
            <local:InverseEmptyStringToVisibilityConverter x:Key="InverseEmptyStringToVisibilityConverter"/>

            <Style TargetType="{x:Type ContextMenu}">
                <Setter Property="HasDropShadow" Value="True"/>
                <Setter Property="Foreground" Value="{DynamicResource HMM.Window.ForegroundBrush}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ContextMenu}">
                            <Border
                                Background="{DynamicResource HMM.Window.BackgroundBrush2}"
                                CornerRadius="4" 
                                BorderThickness="2"
                                Padding="0,5,0,5">
                                <Border.Effect>
                                    <DropShadowEffect Direction="0" ShadowDepth="0" BlurRadius="5" Color="Gray"/>
                                </Border.Effect>
                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type MenuItem}">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <Grid Background="{TemplateBinding Background}">
                                <Border Height="25" Margin="10,0,20,0">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <TextBlock Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Left" Text="{TemplateBinding Header}" Foreground="{TemplateBinding Foreground}"/>
                                        <TextBlock Grid.Column="1" Margin="4,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Right" Text="{TemplateBinding InputGestureText}" Foreground="{TemplateBinding Foreground}"/>
                                    </Grid>
                                </Border>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Background" Value="{DynamicResource HMM.Menu.DisabledColor}"/>
                        <Setter Property="Foreground" Value="{DynamicResource HMM.Menu.DisabledTextColor}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="True">
                        <Setter Property="Foreground" Value="{DynamicResource HMM.Window.ForegroundBrush}"/>
                    </Trigger>
                    <Trigger Property="IsHighlighted" Value="True">
                        <Setter Property="Background" Value="{DynamicResource HMM.Menu.HoverColor}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type ToolTip}">
                <Setter Property="Background" Value="{DynamicResource HMM.Window.BackgroundBrush1}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToolTip}">
                            <Border Background="{TemplateBinding Background}" CornerRadius="4" Padding="4" BorderThickness="2" BorderBrush="Transparent">
                                <Border.Effect>
                                    <DropShadowEffect Color="Gray" Direction="0" ShadowDepth="0" BlurRadius="2"/>
                                </Border.Effect>
                                <ContentPresenter Margin="4"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        
            <Style TargetType="{x:Type RadioButton}">
                <Setter Property="Foreground" Value="{DynamicResource HMM.Window.ForegroundBrush}"/>
            </Style>
        
            <Style x:Key="HedgeWindow" TargetType="{x:Type Window}">
                <Setter Property="Background" Value="{DynamicResource HMM.Window.BackgroundBrush}"/>
                <Setter Property="AllowsTransparency" Value="False"/>
                <Setter Property="WindowStyle" Value="SingleBorderWindow"/>
                <Setter Property="WindowChrome.WindowChrome">
                    <Setter.Value>
                        <WindowChrome 
                            CaptionHeight="22"
                            CornerRadius="0" 
                            GlassFrameThickness="0"
                            NonClientFrameEdges="None"
                            ResizeBorderThickness="5"
                            UseAeroCaptionButtons="False"/>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Window}">
                            <Grid>
                                <Border x:Name="OutlineBorder" BorderThickness="1" Background="Transparent" IsHitTestVisible="False" BorderBrush="{DynamicResource HMM.Window.AccentBrush2}" Panel.ZIndex="2"/>
                                <Grid x:Name="WindowGrid" Margin="1" Background="{TemplateBinding Background}" Loaded="Window_Loaded" Panel.ZIndex="1">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="22"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Image Width="22" Height="22" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="2,2,0,0" Source="Resources/Graphics/icon256.png"/>
                                    <Label Content="{TemplateBinding Title}" Height="33" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="32,0,0,0" Foreground="#E9E9E9"/>
                                    <StackPanel Orientation="Horizontal" VerticalAlignment="Top" HorizontalAlignment="Right" WindowChrome.IsHitTestVisibleInChrome="True">
                                        <Button x:Name="MinBtn" Style="{DynamicResource WindowFrameButton}" Click="Minimize_Click"
                                                VerticalContentAlignment="Center" HorizontalContentAlignment="Stretch">
                                            <Border BorderThickness="0,0,0,4" Padding="2" Margin="12,6,12,0" 
                                                    BorderBrush="{DynamicResource HMM.Button.ForegroundBrush}" Background="Transparent"/>
                                        </Button>

                                        <Button x:Name="MaxBtn" Style="{DynamicResource WindowFrameButton}" Click="MaxBtn_Click"
                                                VerticalContentAlignment="Center" HorizontalContentAlignment="Center">
                                            <Border BorderThickness="3.5" Padding="2" Margin="0,6,0,2" 
                                                    BorderBrush="{DynamicResource HMM.Button.ForegroundBrush}" Background="Transparent"/>
                                        </Button>

                                        <Button x:Name="CloseBtn" Style="{DynamicResource WindowFrameButton}" Click="Close_Click" 
                                                FontWeight="ExtraBold" Foreground="{DynamicResource HMM.Button.ForegroundBrush}" 
                                                FontSize="18" Content="×"/>
                                    </StackPanel>

                                    <Grid Margin="4" Grid.Row="1" Background="{DynamicResource HMM.Window.BackgroundBrush}" Panel.ZIndex="1">
                                        <AdornerDecorator>
                                            <ContentPresenter/>
                                        </AdornerDecorator>
                                    </Grid>
                                </Grid>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsActive" Value="False">
                                    <Setter TargetName="OutlineBorder" Property="Opacity" Value="0"/>
                                </Trigger>
                                <Trigger Property="IsActive" Value="True">
                                    <Setter TargetName="OutlineBorder" Property="Opacity" Value="1"/>
                                </Trigger>
                                <Trigger Property="WindowState" Value="Maximized">
                                    <Setter TargetName="WindowGrid" Property="Margin" Value="8"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type Border}" x:Key="WindowFrame">
                <Setter Property="BorderBrush" Value="{DynamicResource HMM.Window.AccentBrush}"/>
                <Setter Property="Background" Value="{DynamicResource HMM.Window.BackgroundBrush}"/>
                <Setter Property="BorderThickness" Value="1"/>
            </Style>
            <Style TargetType="{x:Type Button}" x:Key="WindowFrameButton">
                <Setter Property="Width" Value="35"/>
                <Setter Property="Height" Value="25"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" Opacity="{TemplateBinding Opacity}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource HMM.Button.BackgroundBrush}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource HMM.Button.BackgroundBrush}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Opacity" Value="0"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource HMM.Button.BackgroundBrush}" />
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Background" Value="{DynamicResource HMM.Button.BackgroundBrush}" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="Grip" TargetType="{x:Type Rectangle}">
                <Setter Property="Focusable" Value="False" />
                <Setter Property="Fill" Value="Transparent" />
                <Setter Property="Tag" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}}" />
            </Style>

            <Style TargetType="{x:Type ProgressBar}">
                <Setter Property="Background" Value="{DynamicResource HMM.Window.BackgroundBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource HMM.Window.AccentBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource HMM.Window.AccentBrush}"/>
            </Style>

            <Style TargetType="{x:Type TextBox}">
                <Setter Property="Foreground" Value="{DynamicResource HMM.Window.ForegroundBrush}"/>
                <Setter Property="Background" Value="{DynamicResource HMM.Window.BackgroundBrush1}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource HMM.Window.BorderBrush}" />
            </Style>

            <Style TargetType="{x:Type pt:TextBoxEx}">
                <Setter Property="Foreground" Value="{DynamicResource HMM.Window.ForegroundBrush}"/>
                <Setter Property="Background" Value="{DynamicResource HMM.Window.BackgroundBrush1}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource HMM.Window.BorderBrush}" />
            </Style>

            <!-- Tabs -->
            <Style TargetType="{x:Type TabControl}">
                <Setter Property="BorderBrush" Value="{DynamicResource HMM.Window.BorderBrush}" />
                <EventSetter Event="Selector.SelectionChanged" Handler="TabControl_SelectionChanged"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TabControl}">
                            <Grid KeyboardNavigation.TabNavigation="Local">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <TabPanel IsItemsHost="True"/>
                                <Border BorderThickness="0,2,0,0" BorderBrush="{DynamicResource HMM.Window.AccentBrush2}" Grid.Row="1">
                                    <Grid Margin="0,5,0,0">
                                        <ContentPresenter x:Name="PART_Presenter" ContentSource="SelectedContent" HorizontalAlignment="Stretch"/>
                                        <Rectangle x:Name="PART_TempArea"/>
                                    </Grid>
                                </Border>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type GroupBox}">
                <Setter Property="Background" Value="{DynamicResource HMM.Window.AccentBrush1}"/>
                <Setter Property="Foreground" Value="{DynamicResource HMM.Window.ForegroundBrush}"/>
                <Setter Property="MinHeight"             Value="20px" />
                <Setter Property="MinWidth"              Value="20px" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GroupBox}">
                            <Grid>
                                <Border x:Name="EffectBorder" Background="{DynamicResource HMM.Window.BackgroundBrush}" CornerRadius="8,8,8,8" Effect="{DynamicResource HoverEffect}"/>
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="*" />
                                    </Grid.RowDefinitions>
                                    <Border Grid.Row="0" CornerRadius="8,8,0,0" BorderBrush="{DynamicResource HMM.Window.BorderBrush}" Background="{DynamicResource HMM.Header.BackgroundBrush}" BorderThickness="1">
                                        <ContentPresenter Margin="8,4,0,4" ContentSource="Header" RecognizesAccessKey="True" />
                                    </Border>

                                    <Border Grid.Row="1" BorderThickness="1,0,1,1" CornerRadius="0,0,8,8" BorderBrush="{DynamicResource HMM.Window.BorderBrush}">
                                        <ContentPresenter Margin="4" />
                                    </Border>
                                </Grid>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                   Storyboard.TargetName="EffectBorder"
                                                                   Storyboard.TargetProperty="(Effect).Opacity">
                                                    <SplineDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" 
                                                                   Storyboard.TargetName="EffectBorder"
                                                                   Storyboard.TargetProperty="(Effect).Opacity">
                                                    <SplineDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type TabItem}">
                <Setter Property="Background" Value="{DynamicResource HMM.Window.AccentBrush1}"/>
                <Setter Property="Foreground" Value="{DynamicResource HMM.Window.ForegroundBrush}"/>
                <Setter Property="MinHeight"             Value="20" />
                <Setter Property="MinWidth"              Value="50" />
                <Setter Property="Padding" Value="10,0,10,0"/>
                <Setter Property="LayoutTransform" >
                    <Setter.Value>
                        <ScaleTransform x:Name="scaleTransform" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TabItem}">
                            <Border BorderBrush="Transparent" Width="{TemplateBinding Width}" 
                                    Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                                <TextBlock Text="{TemplateBinding Header}" Foreground="{TemplateBinding Foreground}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource HMM.Window.AccentBrush1}" />
                                    <Setter Property="Foreground" Value="{DynamicResource HMM.Window.AccentForegroundBrush}" />
                                </Trigger>
                                <Trigger Property="IsMouseDirectlyOver" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource HMM.Window.AccentBrush3}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="False"/>
                                        <Condition Property="IsSelected" Value="False"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" Value="Transparent"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!-- Button -->
            <Style TargetType="{x:Type Button}">
                <Setter Property="SnapsToDevicePixels"   Value="true" />
                <Setter Property="OverridesDefaultStyle" Value="true" />
                <Setter Property="Foreground"            Value="{DynamicResource HMM.Button.ForegroundBrush}" />
                <Setter Property="Background"            Value="{DynamicResource HMM.Button.BackgroundBrush}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border TextBlock.Foreground="{DynamicResource HMM.window.Fo}"
                        x:Name="Border"
                        BorderBrush="{TemplateBinding Foreground}"
                        BorderThickness=".2"
                        CornerRadius="4" 
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualStateGroup.Transitions>
                                            <VisualTransition GeneratedDuration="0:0:0.1" />
                                            <VisualTransition GeneratedDuration="0" To="Pressed" />
                                        </VisualStateGroup.Transitions>
                                        <VisualState x:Name="Normal" />
                                        <VisualState x:Name="MouseOver">
                                            <Storyboard>
                                                <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                              Storyboard.TargetName="Border">
                                                    <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource HMM.Button.HoverColor}" />
                                                </ColorAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Pressed">
                                            <Storyboard>
                                                <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                              Storyboard.TargetName="Border">
                                                    <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource HMM.Button.PressedColor}" />
                                                </ColorAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Disabled">
                                            <Storyboard>
                                                <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                              Storyboard.TargetName="Border">
                                                    <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource HMM.Button.DisabledColor}" />
                                                </ColorAnimationUsingKeyFrames>
                                                <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)"
                              Storyboard.TargetName="Border">
                                                    <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource HMM.Button.DisabledTextColor}" />
                                                </ColorAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Focus">
                                            <Storyboard>
                                                <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                              Storyboard.TargetName="Border">
                                                    <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource HMM.Window.BackgroundColor1}" />
                                                </ColorAnimationUsingKeyFrames>
                                                <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)"
                              Storyboard.TargetName="Border">
                                                    <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource HMM.Button.FocusColor}" />
                                                </ColorAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <ContentPresenter Margin="2"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  RecognizesAccessKey="True" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!-- Others -->
            <Style TargetType="{x:Type Label}">
                <Setter Property="Foreground" Value="{DynamicResource HMM.Window.ForegroundBrush}"/>
            </Style>
            <Style TargetType="{x:Type TextBlock}">
                <Setter Property="Foreground" Value="{DynamicResource HMM.Window.ForegroundBrush}"/>
            </Style>

            <Style TargetType="{x:Type GridViewColumnHeader}">
                <Setter Property="Background" Value="{DynamicResource HMM.Window.BackgroundBrush1}"/>
                <Setter Property="Height" Value="22"/>
                <Setter Property="MinWidth" Value="30"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                            <Border BorderThickness="0,0,0,1" BorderBrush="{DynamicResource HMM.Window.BorderBrush}">
                                <Grid Background="{TemplateBinding Background}" MinWidth="{TemplateBinding MinWidth}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="2"/>
                                    </Grid.ColumnDefinitions>
                                    <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                    <Thumb x:Name="PART_HeaderGripper" Grid.Column="1"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource HMM.Button.HoverBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="Role" Value="Padding">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="GridViewColumnHeader">
                                    <Border Background="{TemplateBinding Background}" Margin="0,0,-2,0" BorderThickness="0,0,0,1" BorderBrush="{DynamicResource HMM.Window.BorderBrush}"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="{x:Type ListViewItem}">
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Padding" Value="2,0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                            <Grid>
                                <Border x:Name="innerBorder" 
                                      Background="{TemplateBinding Background}" 
                                      Padding="{TemplateBinding Padding}" 
                                      SnapsToDevicePixels="true" />
                                <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter TargetName="innerBorder" Property="Background" Value="{DynamicResource HMM.Button.HoverBrush}"/>
                                </Trigger>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter TargetName="innerBorder" Property="Background" Value="{DynamicResource HMM.Button.HoverBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type Thumb}">
                <Setter Property="Width"
                      Value="2" />
                <Setter Property="Background" Value="{DynamicResource HMM.Window.BorderBrush}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Border Padding="{TemplateBinding Padding}"
                                    Background="Transparent">
                                <Rectangle HorizontalAlignment="Center"
                                           Width="2"
                                           Fill="{TemplateBinding Background}" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="FocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ScrollBarButton" TargetType="{x:Type RepeatButton}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Border x:Name="border" BorderBrush="{StaticResource ScrollBar.Static.Border}" BorderThickness="1" Background="{StaticResource ScrollBar.Static.Background}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ScrollBarThumbVertical" TargetType="{x:Type Thumb}">
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Border x:Name="rectangle" Background="{StaticResource ScrollBar.Static.Thumb}" Height="{TemplateBinding Height}" SnapsToDevicePixels="True" Width="{TemplateBinding Width}" CornerRadius="5"/>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="rectangle" Value="{StaticResource ScrollBar.MouseOver.Thumb}"/>
                                </Trigger>
                                <Trigger Property="IsDragging" Value="true">
                                    <Setter Property="Background" TargetName="rectangle" Value="{StaticResource ScrollBar.Pressed.Thumb}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ScrollBarThumbHorizontal" TargetType="{x:Type Thumb}">
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Border x:Name="rectangle" Background="{StaticResource ScrollBar.Static.Thumb}" Height="{TemplateBinding Height}" SnapsToDevicePixels="True" Width="{TemplateBinding Width}" CornerRadius="5"/>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="rectangle" Value="{StaticResource ScrollBar.MouseOver.Thumb}"/>
                                </Trigger>
                                <Trigger Property="IsDragging" Value="true">
                                    <Setter Property="Background" TargetName="rectangle" Value="{StaticResource ScrollBar.Pressed.Thumb}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type ScrollBar}">
                <Style.Triggers>
                    <Trigger Property="Orientation" Value="Horizontal">
                        <Setter Property="Width" Value="Auto"/>
                        <Setter Property="MinWidth" Value="0"/>
                        <Setter Property="Height" Value="8"/>
                        <Setter Property="MinHeight" Value="8"/>
                        <Setter Property="MaxHeight" Value="8"/>
                        <Setter Property="BorderThickness" Value="0,1"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ScrollBar}">
                                    <Grid x:Name="Bg" SnapsToDevicePixels="true">
                                        <Track x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding IsMouseOver}">
                                            <Track.DecreaseRepeatButton>
                                                <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                                            </Track.DecreaseRepeatButton>
                                            <Track.IncreaseRepeatButton>
                                                <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                                            </Track.IncreaseRepeatButton>
                                            <Track.Thumb>
                                                <Thumb Style="{StaticResource ScrollBarThumbHorizontal}"/>
                                            </Track.Thumb>
                                        </Track>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                    <Trigger Property="Orientation" Value="Vertical">
                        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
                        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
                        <Setter Property="Background" Value="{StaticResource ScrollBar.Static.Background}"/>
                        <Setter Property="BorderBrush" Value="{StaticResource ScrollBar.Static.Border}"/>
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        <Setter Property="BorderThickness" Value="1,0"/>
                        <Setter Property="Width" Value="8"/>
                        <Setter Property="MinWidth" Value="8"/>
                        <Setter Property="MaxWidth" Value="8"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ScrollBar}">
                                    <Grid x:Name="Bg" SnapsToDevicePixels="true">
                                        <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}">
                                            <Track.DecreaseRepeatButton>
                                                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                                            </Track.DecreaseRepeatButton>
                                            <Track.IncreaseRepeatButton>
                                                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                                            </Track.IncreaseRepeatButton>
                                            <Track.Thumb>
                                                <Thumb Style="{StaticResource ScrollBarThumbVertical}"/>
                                            </Track.Thumb>
                                        </Track>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type ToggleButton}" x:Key="ComboBoxToggle">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{DynamicResource HMM.Window.BackgroundBrush}">
                                <Border BorderThickness="0.5" CornerRadius="2" BorderBrush="Gray">
                                    <Path Data="M 0 0 L 4 4 L 8 0 Z" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,0,5,0" Fill="{DynamicResource HMM.Window.ForegroundBrush}"/>
                                </Border>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type ScrollViewer}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Border Grid.Column="1"
                      BorderThickness="0,1,1,1">
                                    <Border.BorderBrush>
                                        <SolidColorBrush Color="{DynamicResource BorderMediumColor}" />
                                    </Border.BorderBrush>
                                    <ScrollContentPresenter CanContentScroll="{TemplateBinding CanContentScroll}" />
                                </Border>
                                <ScrollBar x:Name="PART_VerticalScrollBar"
                         Grid.Column="1"
                         Value="{TemplateBinding VerticalOffset}"
                         Maximum="{TemplateBinding ScrollableHeight}"
                         ViewportSize="{TemplateBinding ViewportHeight}"
                         Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                         HorizontalAlignment="Right"/>
                                <ScrollBar x:Name="PART_HorizontalScrollBar"
                         Orientation="Horizontal"
                         Grid.Row="1"
                         Grid.Column="1"
                         Value="{TemplateBinding HorizontalOffset}"
                         Maximum="{TemplateBinding ScrollableWidth}"
                         ViewportSize="{TemplateBinding ViewportWidth}"
                         Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>

                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="Foreground" Value="{DynamicResource HMM.Window.ForegroundBrush}"/>
                <Setter Property="Background" Value="{DynamicResource HMM.Window.BackgroundBrush1}"/>
                <Setter Property="BorderBrush" Value="#FF434346" />
                <Setter Property="AllowDrop" Value="true"/>
                <Setter Property="MinWidth" Value="0"/>
                <Setter Property="MinHeight" Value="0"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                            <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type ComboBox}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ComboBox}">
                            <Grid>
                                <ToggleButton Style="{StaticResource ComboBoxToggle}"
                                              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                              ClickMode="Press" Focusable="False"/>
                                <ContentPresenter x:Name="ContentSite" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}"
                                                  HorizontalAlignment="Left" VerticalAlignment="Center"
                                                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Margin="5,0,0,0"/>
                                <!--<TextBox x:Name="PART_EditableTextBox" Style="{StaticResource ComboBoxEditableTextBox}" Background="Transparent" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                                         Margin="2,0,25,0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>-->
                                <Popup x:Name="PART_Popup" AllowsTransparency="True" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" PopupAnimation="Fade">
                                    <Border BorderThickness="1" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                            Background="{DynamicResource HMM.Window.BackgroundBrush}" BorderBrush="{DynamicResource HMM.Window.BorderBrush}" CornerRadius="2">
                                        <ScrollViewer>
                                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Margin="0,5,0,5"/>
                                        </ScrollViewer>
                                    </Border>
                                </Popup>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type ComboBoxItem}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                            <Border Background="{TemplateBinding Background}">
                                <ContentPresenter Margin="2"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Style.Triggers>
                    <Trigger Property="IsHighlighted" Value="True">
                        <Setter Property="Background" Value="{DynamicResource HMM.Menu.HoverColor}"/>
                    </Trigger>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Background" Value="{DynamicResource HMM.Menu.HoverColor}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type ListView}">
                <Setter Property="Background" Value="{DynamicResource HMM.Window.BackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource HMM.Window.BorderBrush}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Foreground" Value="#FF042271"/>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
                <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListView}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="8">
                                <Border.OpacityMask>
                                    <VisualBrush Stretch="Fill">
                                        <VisualBrush.Visual>
                                            <Border
                                                Background="White"
                                                SnapsToDevicePixels="True"
                                                CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource AncestorType=Border}}"
                                                Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Border}}"
                                                Height="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=Border}}"/>
                                        </VisualBrush.Visual>
                                    </VisualBrush>
                                </Border.OpacityMask>
                                <ScrollViewer Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
                                    <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </ScrollViewer>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <SolidColorBrush x:Key="SliderThumb.Static.Foreground" Color="#FFE5E5E5"/>
            <SolidColorBrush x:Key="SliderThumb.MouseOver.Background" Color="#FFDCECFC"/>
            <SolidColorBrush x:Key="SliderThumb.MouseOver.Border" Color="#FF7Eb4EA"/>
            <SolidColorBrush x:Key="SliderThumb.Pressed.Background" Color="#FFDAECFC"/>
            <SolidColorBrush x:Key="SliderThumb.Pressed.Border" Color="#FF569DE5"/>
            <SolidColorBrush x:Key="SliderThumb.Disabled.Background" Color="#FFF0F0F0"/>
            <SolidColorBrush x:Key="SliderThumb.Disabled.Border" Color="#FFD9D9D9"/>
            <SolidColorBrush x:Key="SliderThumb.Static.Background" Color="#FFF0F0F0"/>
            <SolidColorBrush x:Key="SliderThumb.Static.Border" Color="#FFACACAC"/>
            <ControlTemplate x:Key="SliderThumbHorizontalTop" TargetType="{x:Type Thumb}">
                <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
                    <Path x:Name="grip" Data="M 0,6 C0,6 5.5,0 5.5,0 5.5,0 11,6 11,6 11,6 11,18 11,18 11,18 0,18 0,18 0,18 0,6 0,6 z" Fill="{StaticResource SliderThumb.Static.Background}" Stretch="Fill" SnapsToDevicePixels="True" Stroke="{StaticResource SliderThumb.Static.Border}" StrokeThickness="1" UseLayoutRounding="True" VerticalAlignment="Center"/>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                        <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
                    </Trigger>
                    <Trigger Property="IsDragging" Value="true">
                        <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                        <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                        <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <ControlTemplate x:Key="SliderThumbHorizontalBottom" TargetType="{x:Type Thumb}">
                <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
                    <Path x:Name="grip" Data="M 0,12 C0,12 5.5,18 5.5,18 5.5,18 11,12 11,12 11,12 11,0 11,0 11,0 0,0 0,0 0,0 0,12 0,12 z" Fill="{StaticResource SliderThumb.Static.Background}" Stretch="Fill" SnapsToDevicePixels="True" Stroke="{StaticResource SliderThumb.Static.Border}" StrokeThickness="1" UseLayoutRounding="True" VerticalAlignment="Center"/>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                        <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
                    </Trigger>
                    <Trigger Property="IsDragging" Value="true">
                        <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                        <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                        <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <SolidColorBrush x:Key="SliderThumb.Track.Border" Color="#FFD6D6D6"/>
            <SolidColorBrush x:Key="SliderThumb.Track.Background" Color="#FFE7EAEA"/>
            <ControlTemplate x:Key="SliderThumbHorizontalDefault" TargetType="{x:Type Thumb}">
                <Grid HorizontalAlignment="Stretch" UseLayoutRounding="True" VerticalAlignment="Stretch">
                    <Ellipse x:Name="grip" Fill="{StaticResource SliderThumb.Static.Background}" Stretch="Fill" SnapsToDevicePixels="True" Stroke="{StaticResource SliderThumb.Static.Border}" StrokeThickness="2" UseLayoutRounding="True" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"/>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                        <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
                    </Trigger>
                    <Trigger Property="IsDragging" Value="true">
                        <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                        <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                        <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        
            <ControlTemplate x:Key="SliderHorizontal" TargetType="{x:Type Slider}">
                <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <TickBar x:Name="TopTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,0,0,2" Placement="Top" Grid.Row="0" Visibility="Collapsed"/>
                        <TickBar x:Name="BottomTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,2,0,0" Placement="Bottom" Grid.Row="2" Visibility="Collapsed"/>
                        <Border x:Name="TrackBackground" BorderBrush="{StaticResource SliderThumb.Track.Border}" BorderThickness="1" Background="{StaticResource SliderThumb.Track.Background}" Height="4.0" Margin="5,0" Grid.Row="1" VerticalAlignment="center">
                            <Canvas Margin="-6,-1">
                                <Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Height="4.0" Visibility="Hidden"/>
                            </Canvas>
                        </Border>
                        <Track x:Name="PART_Track" Grid.Row="1">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb x:Name="Thumb" Focusable="False" Height="15" OverridesDefaultStyle="True" Template="{StaticResource SliderThumbHorizontalDefault}" VerticalAlignment="Center" Width="15"/>
                            </Track.Thumb>
                        </Track>
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="TickPlacement" Value="TopLeft">
                        <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                        <Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbHorizontalTop}"/>
                        <Setter Property="Margin" TargetName="TrackBackground" Value="5,2,5,0"/>
                    </Trigger>
                    <Trigger Property="TickPlacement" Value="BottomRight">
                        <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                        <Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbHorizontalBottom}"/>
                        <Setter Property="Margin" TargetName="TrackBackground" Value="5,0,5,2"/>
                    </Trigger>
                    <Trigger Property="TickPlacement" Value="Both">
                        <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                        <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                    </Trigger>
                    <Trigger Property="IsSelectionRangeEnabled" Value="true">
                        <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
                    </Trigger>
                    <Trigger Property="IsKeyboardFocused" Value="true">
                        <Setter Property="Foreground" TargetName="Thumb" Value="Blue"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <ControlTemplate x:Key="SliderThumbVerticalLeft" TargetType="{x:Type Thumb}">
                <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
                    <Path x:Name="grip" Data="M 6,11 C6,11 0,5.5 0,5.5 0,5.5 6,0 6,0 6,0 18,0 18,0 18,0 18,11 18,11 18,11 6,11 6,11 z" Fill="{StaticResource SliderThumb.Static.Background}" Stretch="Fill" Stroke="{StaticResource SliderThumb.Static.Border}"/>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                        <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
                    </Trigger>
                    <Trigger Property="IsDragging" Value="true">
                        <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                        <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                        <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <ControlTemplate x:Key="SliderThumbVerticalRight" TargetType="{x:Type Thumb}">
                <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
                    <Path x:Name="grip" Data="M 12,11 C12,11 18,5.5 18,5.5 18,5.5 12,0 12,0 12,0 0,0 0,0 0,0 0,11 0,11 0,11 12,11 12,11 z" Fill="{StaticResource SliderThumb.Static.Background}" Stretch="Fill" Stroke="{StaticResource SliderThumb.Static.Border}"/>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                        <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
                    </Trigger>
                    <Trigger Property="IsDragging" Value="true">
                        <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                        <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                        <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <ControlTemplate x:Key="SliderThumbVerticalDefault" TargetType="{x:Type Thumb}">
                <Grid HorizontalAlignment="Stretch" UseLayoutRounding="True" VerticalAlignment="Stretch">
                    <Ellipse x:Name="grip" Fill="{StaticResource SliderThumb.Static.Background}" Stretch="Fill" SnapsToDevicePixels="True" Stroke="{StaticResource SliderThumb.Static.Border}" StrokeThickness="2" UseLayoutRounding="True" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"/>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                        <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
                    </Trigger>
                    <Trigger Property="IsDragging" Value="true">
                        <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                        <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                        <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <ControlTemplate x:Key="SliderVertical" TargetType="{x:Type Slider}">
                <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition MinWidth="{TemplateBinding MinWidth}" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <TickBar x:Name="TopTick" Grid.Column="0" Fill="{TemplateBinding Foreground}" Margin="0,0,2,0" Placement="Left" Visibility="Collapsed" Width="4"/>
                        <TickBar x:Name="BottomTick" Grid.Column="2" Fill="{TemplateBinding Foreground}" Margin="2,0,0,0" Placement="Right" Visibility="Collapsed" Width="4"/>
                        <Border x:Name="TrackBackground" BorderBrush="{StaticResource SliderThumb.Track.Border}" BorderThickness="1" Background="{StaticResource SliderThumb.Track.Background}" Grid.Column="1" HorizontalAlignment="center" Margin="0,5" Width="4.0">
                            <Canvas Margin="-1,-6">
                                <Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Visibility="Hidden" Width="4.0"/>
                            </Canvas>
                        </Border>
                        <Track x:Name="PART_Track" Grid.Column="1">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb x:Name="Thumb" Focusable="False" Height="15" OverridesDefaultStyle="True" Template="{StaticResource SliderThumbVerticalDefault}" VerticalAlignment="Top" Width="15"/>
                            </Track.Thumb>
                        </Track>
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="TickPlacement" Value="TopLeft">
                        <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                        <Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbVerticalLeft}"/>
                        <Setter Property="Margin" TargetName="TrackBackground" Value="2,5,0,5"/>
                    </Trigger>
                    <Trigger Property="TickPlacement" Value="BottomRight">
                        <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                        <Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbVerticalRight}"/>
                        <Setter Property="Margin" TargetName="TrackBackground" Value="0,5,2,5"/>
                    </Trigger>
                    <Trigger Property="TickPlacement" Value="Both">
                        <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                        <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                    </Trigger>
                    <Trigger Property="IsSelectionRangeEnabled" Value="true">
                        <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
                    </Trigger>
                    <Trigger Property="IsKeyboardFocused" Value="true">
                        <Setter Property="Foreground" TargetName="Thumb" Value="Blue"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <Style TargetType="{x:Type Slider}">
                <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="Foreground" Value="{StaticResource SliderThumb.Static.Foreground}"/>
                <Setter Property="Template" Value="{StaticResource SliderHorizontal}"/>
                <Style.Triggers>
                    <Trigger Property="Orientation" Value="Vertical">
                        <Setter Property="Template" Value="{StaticResource SliderVertical}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <SolidColorBrush x:Key="OptionMark.Static.Background" Color="#FFE8E8E8"/>
            <SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FF707070"/>
            <Style x:Key="OptionMarkFocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="#FFEEEEEE"/>
            <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="#FF5593FF"/>
            <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="#FF212121"/>
            <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="#FFE6E6E6"/>
            <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="#FFBCBCBC"/>
            <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#FF707070"/>
            <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="#FFD9ECFF"/>
            <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="#FF3C77DD"/>
            <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="#FF000000"/>
            <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="#FF000000"/>
            <Style TargetType="{x:Type CheckBox}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource HMM.Window.ForegroundBrush}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}">
                            <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <Grid x:Name="markGrid">
                                        <Path x:Name="optionMark" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " Fill="{StaticResource OptionMark.Static.Glyph}" Margin="1" Opacity="0" Stretch="None"/>
                                        <Rectangle x:Name="indeterminateMark" Fill="{StaticResource OptionMark.Static.Glyph}" Margin="2" Opacity="0"/>
                                    </Grid>
                                </Border>
                                <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="HasContent" Value="true">
                                    <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                                    <Setter Property="Padding" Value="4,-1,0,0"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Border}"/>
                                    <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
                                    <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Border}"/>
                                    <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
                                    <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Border}"/>
                                    <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
                                    <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                                    <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="{x:Null}">
                                    <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                                    <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type pt:DataGrid}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Focusable" Value="True"/>
                <Setter Property="RowsContextMenu">
                    <Setter.Value>
                        <ContextMenu>
                            <MenuItem Header="Insert" Command="pt:DataGridCommands.InsertRows"/>
                            <MenuItem Header="Delete" Command="pt:DataGridCommands.DeleteRows"/>
                        </ContextMenu>
                    </Setter.Value>
                </Setter>
                <Setter Property="ColumnsContextMenu">
                    <Setter.Value>
                        <ContextMenu>
                            <MenuItem Header="Insert" Command="pt:DataGridCommands.InsertColumns"/>
                            <MenuItem Header="Delete" Command="pt:DataGridCommands.DeleteColumns"/>
                            <Separator/>
                            <MenuItem Header="Sort smallest to largest" Command="pt:DataGridCommands.SortAscending"/>
                            <MenuItem Header="Sort largest to smallest" Command="pt:DataGridCommands.SortDescending"/>
                            <MenuItem Header="Do not sort" Command="pt:DataGridCommands.ClearSort"/>
                        </ContextMenu>
                    </Setter.Value>
                </Setter>
                <Setter Property="SheetContextMenu">
                    <Setter.Value>
                        <ContextMenu>
                            <MenuItem Command="ApplicationCommands.Cut"/>
                            <MenuItem Command="ApplicationCommands.Copy"/>
                            <MenuItem Command="ApplicationCommands.Paste"/>
                            <MenuItem Command="ApplicationCommands.Delete"/>
                        </ContextMenu>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type pt:DataGrid}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                                <Grid x:Name="PART_Grid">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="{TemplateBinding RowHeaderWidth}"/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="{TemplateBinding ColumnHeaderHeight}"/>
                                        <RowDefinition/>
                                    </Grid.RowDefinitions>
                                    <ScrollViewer x:Name="PART_SheetScrollViewer" Grid.Column="1" Focusable="False" HorizontalScrollBarVisibility="Auto" Grid.Row="1" VerticalScrollBarVisibility="Auto">
                                        <Grid x:Name="PART_SheetGrid" Background="Transparent">
                                            <Border x:Name="PART_SelectionBackground" Background="Transparent"/>
                                            <Border x:Name="PART_CurrentBackground" Background="{DynamicResource HMM.Window.BackgroundBrush2}"/>
                                            <Border x:Name="PART_Selection" BorderBrush="Black" BorderThickness="3" Margin="-1,-1,-2,-2"/>
                                            <Border x:Name="PART_AutoFillSelection" BorderBrush="Gray" BorderThickness="3" Margin="-1,-1,-2,-2" Visibility="Hidden"/>
                                            <Border x:Name="PART_AutoFillBox" BorderBrush="Gray" BorderThickness="1" Background="Black" HorizontalAlignment="Right" Height="7" Margin="0,0,-4,-4" SnapsToDevicePixels="True" VerticalAlignment="Bottom" Width="7"/>
                                        </Grid>
                                    </ScrollViewer>
                                    <ScrollViewer x:Name="PART_ColumnScrollViewer" Grid.Column="1" HorizontalScrollBarVisibility="Hidden" Grid.Row="0" VerticalScrollBarVisibility="Hidden">
                                        <Grid x:Name="PART_ColumnGrid" Background="{DynamicResource HMM.Menu.DisabledColor}">
                                            <Border x:Name="PART_ColumnSelectionBackground" Background="{DynamicResource HMM.Window.BackgroundBrush2}"/>
                                        </Grid>
                                    </ScrollViewer>
                                    <ScrollViewer x:Name="PART_RowScrollViewer" Grid.Column="0" HorizontalScrollBarVisibility="Hidden" Grid.Row="1" VerticalScrollBarVisibility="Hidden">
                                        <Grid x:Name="PART_RowGrid" Background="Transparent">
                                            <Border x:Name="PART_RowSelectionBackground" Background="{DynamicResource HMM.Window.BackgroundBrush2}"/>
                                        </Grid>
                                    </ScrollViewer>
                                    <Grid Grid.Column="0" Grid.Row="0">
                                        <Border x:Name="PART_TopLeft" BorderBrush="Gray" BorderThickness="1" Background="Transparent" Margin="0">
                                            <Path Data="F1M0,11L11,11 11,0z" Fill="White" HorizontalAlignment="Right" Margin="3" VerticalAlignment="Bottom"/>
                                        </Border>
                                    </Grid>
                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type pt:PropertyGrid}">
                <Setter Property="Focusable" Value="False"/>
                <Setter Property="ValidationErrorStyle">
                    <Setter.Value>
                        <Style TargetType="{x:Type FrameworkElement}">
                            <Style.Triggers>
                                <Trigger Property="Validation.HasError" Value="True">
                                    <Setter Property="ToolTip">
                                        <Setter.Value>
                                            <Binding Path="(Validation.Errors)" RelativeSource="{RelativeSource Self}">
                                                <Binding.Converter>
                                                    <pt:ValidationErrorsToStringConverter/>
                                                </Binding.Converter>
                                            </Binding>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="ValidationErrorTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <TextBlock Foreground="Red" TextWrapping="Wrap" Text="{Binding}"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="CategoryControlTemplate">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                            <Grid Margin="0,8,0,0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                <Separator Grid.Column="1" Margin="4,3,0,0"/>
                                <ContentPresenter Grid.ColumnSpan="2" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Grid.Row="1"/>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="TabHeaderTemplate">
                    <Setter.Value>
                        <DataTemplate DataType="pt:Tab">
                            <StackPanel Orientation="Horizontal">
                                <pt:Bitmap Margin="0,0,4,0" Source="{Binding Icon}">
                                    <pt:Bitmap.Visibility>
                                        <Binding Path="Icon">
                                            <Binding.Converter>
                                                <pt:NullToVisibilityConverter NotNullVisibility="Visible" NullVisibility="Collapsed"/>
                                            </Binding.Converter>
                                        </Binding>
                                    </pt:Bitmap.Visibility>
                                </pt:Bitmap>
                                <TextBlock Text="{Binding Header}">
                                    <TextBlock.Style>
                                        <Style>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding HasErrors}" Value="True">
                                                    <Setter Property="TextElement.Foreground" Value="Red"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </StackPanel>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="ToolTipTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <TextBlock MaxWidth="300" TextWrapping="Wrap" Text="{Binding}"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type pt:PropertyGrid}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                                <Grid>
                                    <TabControl x:Name="PART_Tabs" AutomationProperties.AutomationId="Tabs" Focusable="False" TabStripPlacement="{TemplateBinding TabStripPlacement}"/>
                                    <ScrollViewer x:Name="PART_ScrollViewer" AutomationProperties.AutomationId="ScrollViewer" Focusable="False" VerticalScrollBarVisibility="Auto">
                                        <StackPanel x:Name="PART_Panel" Margin="15,0"/>
                                    </ScrollViewer>
                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>
